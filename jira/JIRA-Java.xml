<!--
RSS generated by JIRA (5.0.7#734-sha1:8ad78a62c71cf08b03545eb446cc3b9bb5ce37ad) at Wed Aug 27 12:10:08 BST 2014

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
http://jira.fudgemsg.org/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml?jqlQuery=project+%3D+FRJ&tempMax=1000&field=key&field=summary
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
-->
<rss version="0.92">
    <channel>
        <title>Fudge Messaging JIRA</title>
        <link>http://jira.fudgemsg.org/secure/IssueNavigator.jspa?reset=true&amp;jqlQuery=project+%3D+FRJ</link>
        <description>An XML representation of a search request</description>
                <language>en-us</language>
                        <issue start="0" end="128" total="128"/>
                <build-info>
            <version>5.0.7</version>
            <build-number>734</build-number>
            <build-date>01-07-2012</build-date>
        </build-info>
<item>
            <title>[FRJ-128] Serialization/Deserialization of a Map&lt;String, Object&gt; has problems</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-128</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;If an attempt is made to serialize an object containing a field of type Map&amp;lt;String, Object&amp;gt; when one of the object values is a Set&amp;lt;String&amp;gt;, then the type information is lost and on deserialization an object is created in the Map  with no type information other than Object.&lt;/p&gt;

&lt;p&gt;Below is an example using Joda a bean but principle should apply to other similar objects:&lt;/p&gt;
&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;@Test
  &lt;span class="code-keyword"&gt;public&lt;/span&gt; void testStringsFudge() &lt;span class="code-keyword"&gt;throws&lt;/span&gt; IOException {

    Set&amp;lt;&lt;span class="code-object"&gt;String&lt;/span&gt;&amp;gt; strings = ImmutableSet.of(&lt;span class="code-quote"&gt;"a"&lt;/span&gt;, &lt;span class="code-quote"&gt;"b"&lt;/span&gt;, &lt;span class="code-quote"&gt;"c"&lt;/span&gt;);
    Bean bean = JodaTestBean.builder().stuff(ImmutableMap.&amp;lt;&lt;span class="code-object"&gt;String&lt;/span&gt;, &lt;span class="code-object"&gt;Object&lt;/span&gt;&amp;gt;of(&lt;span class="code-quote"&gt;"some"&lt;/span&gt;, strings)).build();

    ByteArrayOutputStream baos = &lt;span class="code-keyword"&gt;new&lt;/span&gt; ByteArrayOutputStream();

    &lt;span class="code-keyword"&gt;try&lt;/span&gt; (Writer writer = &lt;span class="code-keyword"&gt;new&lt;/span&gt; OutputStreamWriter(baos)) {
      FudgeContext ctx = OpenGammaFudgeContext.getInstance();

      FormattingXmlStreamWriter xmlStreamWriter = FormattingXmlStreamWriter.builder(writer)
          .indent(&lt;span class="code-keyword"&gt;true&lt;/span&gt;)
          .build();
      FudgeXMLStreamWriter streamWriter = &lt;span class="code-keyword"&gt;new&lt;/span&gt; FudgeXMLStreamWriter(ctx, xmlStreamWriter);
      FudgeMsgWriter fudgeMsgWriter = &lt;span class="code-keyword"&gt;new&lt;/span&gt; FudgeMsgWriter(streamWriter);
      MutableFudgeMsg msg = (&lt;span class="code-keyword"&gt;new&lt;/span&gt; FudgeSerializer(ctx)).objectToFudgeMsg(bean);
      FudgeSerializer.addClassHeader(msg, bean.getClass());
      fudgeMsgWriter.writeMessage(msg);
      fudgeMsgWriter.flush();
      writer.close();
    }

    FudgeContext ctx = OpenGammaFudgeContext.getInstance();
    FudgeXMLStreamReader reader = &lt;span class="code-keyword"&gt;new&lt;/span&gt; FudgeXMLStreamReader(ctx, &lt;span class="code-keyword"&gt;new&lt;/span&gt; InputStreamReader(&lt;span class="code-keyword"&gt;new&lt;/span&gt; ByteArrayInputStream(baos.toByteArray())));
    FudgeMsgReader fudgeMsgReader = &lt;span class="code-keyword"&gt;new&lt;/span&gt; FudgeMsgReader(reader);
    FudgeDeserializer deserializer = &lt;span class="code-keyword"&gt;new&lt;/span&gt; FudgeDeserializer(ctx);
    Bean cycled = deserializer.fudgeMsgToObject(bean.getClass(), fudgeMsgReader.nextMessage());
    assertThat(cycled, is(bean));
  }&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="11142">FRJ-128</key>
            <summary>Serialization/Deserialization of a Map&lt;String, Object&gt; has problems</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="2">Won't Fix</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="julianhowarth">Julian Howarth</reporter>
                        <labels>
                    </labels>
                <created>Mon, 7 Jul 2014 17:25:31 +0100</created>
                <updated>Mon, 7 Jul 2014 18:15:46 +0100</updated>
                    <resolved>Mon, 7 Jul 2014 18:15:46 +0100</resolved>
                            <version>0.3</version>
                                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="11031" author="stephen" created="Mon, 7 Jul 2014 18:15:46 +0100">&lt;p&gt;Fixing in OpenGamma.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-127] DirectBeanFudgeBuilder will happily serialise objects with required fields not set, which cannot be deserialised</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-127</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description/>
                <environment/>
            <key id="11141">FRJ-127</key>
            <summary>DirectBeanFudgeBuilder will happily serialise objects with required fields not set, which cannot be deserialised</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jonathan">Jonathan Senior</reporter>
                        <labels>
                    </labels>
                <created>Wed, 19 Mar 2014 15:50:38 +0000</created>
                <updated>Wed, 19 Mar 2014 15:50:38 +0000</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-126] Change Scannotation to Reflections</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-126</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Scannotation does not support class paths in manifests. Reflections is better maintained.&lt;/p&gt;</description>
                <environment/>
            <key id="11041">FRJ-126</key>
            <summary>Change Scannotation to Reflections</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Fri, 12 Jul 2013 14:54:07 +0100</created>
                <updated>Fri, 12 Jul 2013 18:06:21 +0100</updated>
                    <resolved>Fri, 12 Jul 2013 18:06:21 +0100</resolved>
                                            <fixVersion>0.4</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10931" author="stephen" created="Fri, 12 Jul 2013 18:06:21 +0100">&lt;p&gt;Change made in OpenGamma v0.3.9.9&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-125] Min/max values in date wire type</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-125</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;At OpenGamma we have identified a small enhancement we need in the wire format of the Date types. The aim is to add support for a "maximum date" and a "minimum date" representing the far future and far past. These map onto JSR-310/ThreeTen concepts in Java of LocalDate.MAX and LocalDate.MIN. Other languages can map similarly onto their own maximum/minimum date.&lt;/p&gt;

&lt;p&gt;This change requires two bit-patterns within the 32 bits available for dates, one for maximum and one for minimum. The proposal states that if the day-of-month = 31 and the month == 15 then the date is either minimum or maximum. The maximum date is the largest 23 bit positive number. The minimum date is the largest 23 bit positive number. This gives Integer.MAX_VALUE 0x7fffffff for the maximum date (year 4,194,303, month 15 day 31) and 0x800001ff = Integer.MIN_VALUE + (2pow9 - 1) (511) for the minimum date (year -4,194,304, month 15, day 31).&lt;/p&gt;

&lt;p&gt;This approach means that receivers unaware of the new wire format will see large/small years and an invalid month. If they can handle the invalid month then the years will be reasonable for other processing.&lt;/p&gt;

&lt;p&gt;Note that there will still be dates in Java that cannot be passed over Fudge, as the valid range for years in LocalDate is -999,999,999 to 999,999,999, but this is not a major issue.&lt;/p&gt;

&lt;p&gt;These changes will be made initially on the OpenGamma Fudge-Java fork of Fudge.&lt;/p&gt;</description>
                <environment/>
            <key id="11040">FRJ-125</key>
            <summary>Min/max values in date wire type</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Wed, 13 Mar 2013 12:45:51 +0000</created>
                <updated>Thu, 14 Mar 2013 10:51:59 +0000</updated>
                    <resolved>Thu, 14 Mar 2013 10:51:59 +0000</resolved>
                                            <fixVersion>0.4</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10930" author="stephen" created="Thu, 14 Mar 2013 10:51:59 +0000">&lt;p&gt;Fixed in v0.3.9.8 of OpenGamma fork&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-124] Update JSR-310 dependency to ThreeTen backport</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-124</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;ThreeTen backport is the appropriate dependency for JDK 1.7&lt;/p&gt;</description>
                <environment/>
            <key id="10941">FRJ-124</key>
            <summary>Update JSR-310 dependency to ThreeTen backport</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Mon, 21 Jan 2013 18:41:41 +0000</created>
                <updated>Mon, 29 Jul 2013 12:14:07 +0100</updated>
                    <resolved>Mon, 29 Jul 2013 12:14:07 +0100</resolved>
                                            <fixVersion>0.4</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-123] Move to JDK1.7</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-123</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description/>
                <environment/>
            <key id="10940">FRJ-123</key>
            <summary>Move to JDK1.7</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Mon, 21 Jan 2013 18:40:56 +0000</created>
                <updated>Fri, 25 Jan 2013 16:47:14 +0000</updated>
                    <resolved>Fri, 25 Jan 2013 16:47:14 +0000</resolved>
                                            <fixVersion>0.4</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-122] FudgeMsg can't be serialized</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-122</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;FudgeMsgBase (and AbstractFudgeMsg on the OpenGamma fork) implement Serializable. The FudgeContext member can't however be serialized causing exceptions to be thrown.&lt;/p&gt;

&lt;p&gt;Either, the Serializable marker should be removed or custom read/write method mechanism used so that the message is written out as just a byte[] payload and the GLOBAL_DEFAULT one used to read the object back in.&lt;/p&gt;

&lt;p&gt;My preference would be to remove the Serializable marker as relying on Java's default serializable behaviour gives no control over which Fudge context (and hence type dictionary) will be used when retrieving serialized objects.&lt;/p&gt;</description>
                <environment/>
            <key id="10840">FRJ-122</key>
            <summary>FudgeMsg can't be serialized</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Wed, 29 Aug 2012 10:38:19 +0100</created>
                <updated>Wed, 29 Aug 2012 10:47:30 +0100</updated>
                                                                    <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="10830" author="stephen" created="Wed, 29 Aug 2012 10:47:30 +0100">&lt;p&gt;Removing it will have knock on effects in OpenGamma in terms of the serializability of objects that hold FudgeMsg references.&lt;/p&gt;

&lt;p&gt;I suspect that the right answer is that FudgeMsg should not have a reference to FudgeContext. It seems to add far too much coupling - a message should be just about its state, and not any context.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-121] Refactor project to support maven</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-121</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Refactor project to support maven.&lt;/p&gt;

&lt;p&gt;Change directory structure and add pom.&lt;/p&gt;</description>
                <environment/>
            <key id="10742">FRJ-121</key>
            <summary>Refactor project to support maven</summary>
                <type id="3" iconUrl="http://jira.fudgemsg.org/images/icons/task.gif">Task</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Mon, 18 Jun 2012 11:43:40 +0100</created>
                <updated>Thu, 21 Jun 2012 16:48:45 +0100</updated>
                    <resolved>Thu, 21 Jun 2012 16:48:45 +0100</resolved>
                                            <fixVersion>0.4</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10731" author="stephen" created="Thu, 21 Jun 2012 16:48:45 +0100">&lt;p&gt;Fixed on OpenGamma fork&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-120] Remove Commons Lang dependency</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-120</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Remove Commons Lang dependency&lt;/p&gt;</description>
                <environment/>
            <key id="10741">FRJ-120</key>
            <summary>Remove Commons Lang dependency</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Wed, 13 Jun 2012 15:40:19 +0100</created>
                <updated>Thu, 14 Jun 2012 14:37:13 +0100</updated>
                    <resolved>Thu, 14 Jun 2012 14:37:13 +0100</resolved>
                                            <fixVersion>0.4</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10730" author="stephen" created="Wed, 13 Jun 2012 15:41:13 +0100">&lt;p&gt;Only used in one place (and one in proto). Proto generated classes still depend on Common Lang v2.x.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-119] Single-pass generation of FudgeMsg objects in non-streaming form</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-119</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now byte encoding of a &lt;tt&gt;FudgeMsg&lt;/tt&gt; object is a 2-pass operation in streaming mode:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Pass over the structure to get the sizes for the header; then&lt;/li&gt;
	&lt;li&gt;Pass over the structure to encode the fields once the header has been written.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This is necessary for two modes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Where fields are being streamed on the wire; and&lt;/li&gt;
	&lt;li&gt;Where a fixed-width byte array is being generated just for the message.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;However, in a case where serialization is passed a byte array or byte buffer the caller deems sufficient for the size of the message, encoding could work in the following way:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Encode the header, leaving the size blank;&lt;/li&gt;
	&lt;li&gt;Encode the fields, keeping track of size;&lt;/li&gt;
	&lt;li&gt;Rewind back to the header and write the size.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This would form a single-pass operation and improve encoding performance.&lt;/p&gt;</description>
                <environment/>
            <key id="10740">FRJ-119</key>
            <summary>Single-pass generation of FudgeMsg objects in non-streaming form</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Tue, 12 Jun 2012 09:28:26 +0100</created>
                <updated>Tue, 12 Jun 2012 09:28:26 +0100</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-118] FudgeDeserializer.fudgeMsgToObject can swallow the most relevant exception</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-118</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;When using the class headers to try to find and use a Fudge builder for deserialisation, the earlier class headers are usually the more relevant ones, with later class headers mapping to very general builders which often have no chance of working (e.g. a bean builder on an abstract class). If the intended builder fails along with one or more subsequent builders then the 'real' exception is replaced by the one from the last builder used. It would be more useful for debugging to propagate the entire list of exceptions showing all attempts.&lt;/p&gt;</description>
                <environment/>
            <key id="10642">FRJ-118</key>
            <summary>FudgeDeserializer.fudgeMsgToObject can swallow the most relevant exception</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="daniel">Daniel Kwiecinski</assignee>
                                <reporter username="jonathan">Jonathan Senior</reporter>
                        <labels>
                    </labels>
                <created>Tue, 21 Feb 2012 21:22:46 +0000</created>
                <updated>Wed, 29 Feb 2012 11:32:47 +0000</updated>
                    <resolved>Wed, 29 Feb 2012 11:32:47 +0000</resolved>
                                            <fixVersion>0.4</fixVersion>
                                        <due/>
                    <votes>1</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10630" author="daniel" created="Wed, 29 Feb 2012 11:32:47 +0000">&lt;p&gt;Added new exception type which can hold arbitrary context. In this case the context is a list of all accumulated exceptions, ready to be retrieved and analysed by getContext() getter.&lt;/p&gt;

&lt;p&gt;fixing commit 166f744522c8b42152c7086207c4c2f7301cadae&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-117] Provide convenience methods for handling sub-messages on MutableFudgeMsg</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-117</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;MutableFudgeMsg.addSubMessage() and MutableFudgeMsg.ensureSubMessage(), which can use the stored FudgeContext (not exposed) to create the new messages.&lt;/p&gt;</description>
                <environment/>
            <key id="10641">FRJ-117</key>
            <summary>Provide convenience methods for handling sub-messages on MutableFudgeMsg</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Thu, 26 Jan 2012 13:16:26 +0000</created>
                <updated>Thu, 26 Jan 2012 13:54:04 +0000</updated>
                    <resolved>Thu, 26 Jan 2012 13:54:04 +0000</resolved>
                                            <fixVersion>0.4</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-116] Implement correct serialization/deserialization of empty collections.</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-116</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Since empty collections are not type-hinted the deserialization will always assume empty List.&lt;/p&gt;

&lt;p&gt;Suggestion: use type hinting with org.fudgemsg.wire.types.IndicatorWireType&lt;/p&gt;</description>
                <environment/>
            <key id="10540">FRJ-116</key>
            <summary>Implement correct serialization/deserialization of empty collections.</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="daniel">Daniel Kwiecinski</assignee>
                                <reporter username="daniel">Daniel Kwiecinski</reporter>
                        <labels>
                    </labels>
                <created>Fri, 14 Oct 2011 12:21:01 +0100</created>
                <updated>Fri, 14 Oct 2011 15:18:34 +0100</updated>
                    <resolved>Fri, 14 Oct 2011 15:18:34 +0100</resolved>
                            <version>0.4</version>
                                <fixVersion>0.4</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10530" author="daniel" created="Fri, 14 Oct 2011 15:18:34 +0100">&lt;p&gt;Empty collections are always type-hinted with Indicator wire type, so these empty collections can be correctly deserialized.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-115] Members of collections are deserialized to the wrong type (e.g. String) in some instances</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-115</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Received objects of type Map&amp;lt;A,B&amp;gt; or Set&amp;lt;A&amp;gt;, where A is non-primitive, contain String serialisations of As instead of the original As.&lt;/p&gt;</description>
                <environment/>
            <key id="10444">FRJ-115</key>
            <summary>Members of collections are deserialized to the wrong type (e.g. String) in some instances</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="daniel">Daniel Kwiecinski</assignee>
                                <reporter username="kevin">Kevin Vella</reporter>
                        <labels>
                    </labels>
                <created>Tue, 27 Sep 2011 17:46:12 +0100</created>
                <updated>Thu, 13 Oct 2011 18:03:52 +0100</updated>
                    <resolved>Thu, 13 Oct 2011 12:50:15 +0100</resolved>
                                            <fixVersion>0.4</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10432" author="kevin" created="Tue, 27 Sep 2011 17:48:03 +0100">&lt;p&gt;Also see &lt;a href="http://jira.fudgemsg.org/browse/FRJ-81" title="Reflection-based serialization does not work on Maps"&gt;&lt;del&gt;FRJ-81&lt;/del&gt;&lt;/a&gt; (Reflection-based serialization does not work on Maps)&lt;/p&gt;</comment>
                    <comment id="10433" author="daniel" created="Thu, 13 Oct 2011 12:50:15 +0100">&lt;p&gt;Maps, Sets and Lists are type-hinted on -1 and -2 ordinals with the common, concrete entries' class ancestor (if exists) &lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                                <inwardlinks description="is required by">
                            <issuelink>
            <issuekey id="10445">FRN-92</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-114] Add serializer method that always sends class name headers</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-114</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Add serializer method that always sends class name headers. This provides a simple, optional mechanism to support the "serialization" use case where the end result object should be the same as the input object.&lt;/p&gt;</description>
                <environment/>
            <key id="10443">FRJ-114</key>
            <summary>Add serializer method that always sends class name headers</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Tue, 6 Sep 2011 12:52:57 +0100</created>
                <updated>Tue, 6 Sep 2011 13:40:08 +0100</updated>
                    <resolved>Tue, 6 Sep 2011 13:40:08 +0100</resolved>
                                            <fixVersion>0.4</fixVersion>
                                <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-113] Type dictionary returns wrong wire type for byte array</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-113</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;The type dictionary returns wrong wire type for byte array. It should return the variable-size byte array type, but it returns byte-512 instead.&lt;/p&gt;</description>
                <environment/>
            <key id="10441">FRJ-113</key>
            <summary>Type dictionary returns wrong wire type for byte array</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Tue, 23 Aug 2011 19:23:21 +0100</created>
                <updated>Tue, 23 Aug 2011 19:39:49 +0100</updated>
                    <resolved>Tue, 23 Aug 2011 19:39:49 +0100</resolved>
                                            <fixVersion>0.4</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-112] Rename serialization context classes</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-112</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;FudgeSerializationContext and FudgeDeserializationContext are intended for single threaded use, but the "context" suffix doesn't imply this (by comparison with FudgeContext which is shared). Rename to FudgeSerializer and FudgeDeserializer.&lt;/p&gt;</description>
                <environment/>
            <key id="10440">FRJ-112</key>
            <summary>Rename serialization context classes</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Aug 2011 18:36:03 +0100</created>
                <updated>Tue, 9 Aug 2011 10:14:48 +0100</updated>
                    <resolved>Tue, 9 Aug 2011 10:14:48 +0100</resolved>
                                            <fixVersion>0.4</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10430" author="kirk" created="Mon, 8 Aug 2011 09:32:19 +0100">&lt;p&gt;Are there equivalent classes in the C# reference implementation that should also be changed for 0.4?&lt;/p&gt;</comment>
                    <comment id="10431" author="stephen" created="Mon, 8 Aug 2011 10:54:14 +0100">&lt;p&gt;There are a lot of C# classes that need renaming to match. There needs to be a push to fixup the C# version.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-111] Remove time provider based secondary types from default config</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-111</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;The inclusion of secondary types for TimeProvider, DateProvider, DateTimeProvider and InstantProvider is too general. ZonedDateTime matches InstantProvider but loses data in transmission as a result.&lt;/p&gt;

&lt;p&gt;Remove these from the default config, but keep the classes.&lt;/p&gt;</description>
                <environment/>
            <key id="10348">FRJ-111</key>
            <summary>Remove time provider based secondary types from default config</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Wed, 8 Jun 2011 15:22:15 +0100</created>
                <updated>Wed, 8 Jun 2011 16:50:19 +0100</updated>
                    <resolved>Wed, 8 Jun 2011 16:50:02 +0100</resolved>
                            <version>0.3</version>
                                <fixVersion>0.4</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10344" author="stephen" created="Wed, 8 Jun 2011 16:50:19 +0100">&lt;p&gt;See SecondaryTypeLoader.properties&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-110] Number of fields per message limited to a short</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-110</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Number of fields per message limited to a short, when the spec has no specific limitation. Change this to be an int.&lt;/p&gt;</description>
                <environment/>
            <key id="10345">FRJ-110</key>
            <summary>Number of fields per message limited to a short</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Wed, 1 Jun 2011 14:05:49 +0100</created>
                <updated>Fri, 3 Jun 2011 13:09:17 +0100</updated>
                    <resolved>Wed, 1 Jun 2011 14:07:07 +0100</resolved>
                            <version>0.3</version>
                                <fixVersion>0.4</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                            <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10346">FRN-91</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-109] Rename core Fudge classes</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-109</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Rename core Fudge classes.&lt;/p&gt;

&lt;p&gt;The core of Fudge is based around "FudgeFieldContainer" interface. While this abstraction appears to make sense (its a container of fields), it isn't actually helping users to understand Fudge, when they fundamentally care about messages. Multiple places in the code have used the concrete class rather than the interface, probably because of lack of understanding of the existance of the interface.&lt;/p&gt;

&lt;p&gt;Proposed change is "FudgeFieldContainer" to "FudgeMsg" and "MutableFudgeFieldContainer" to "MutableFudgeMsg", with associated changes to other classes.&lt;/p&gt;</description>
                <environment/>
            <key id="10344">FRJ-109</key>
            <summary>Rename core Fudge classes</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Fri, 1 Apr 2011 11:02:04 +0100</created>
                <updated>Wed, 6 Apr 2011 17:08:42 +0100</updated>
                    <resolved>Wed, 6 Apr 2011 17:08:42 +0100</resolved>
                                            <fixVersion>0.4</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10334" author="kirk" created="Fri, 1 Apr 2011 11:09:37 +0100">&lt;p&gt;What would this mean for the actual concrete classes?&lt;/p&gt;</comment>
                    <comment id="10335" author="stephen" created="Fri, 1 Apr 2011 11:16:45 +0100">&lt;p&gt;They would be renamed to.&lt;/p&gt;

&lt;p&gt;"FudgeMessageFactory" -&amp;gt; "FudgeMsgFactory"&lt;br/&gt;
"FudgeMsgBase" -&amp;gt; "AbstractFudgeMsg"&lt;br/&gt;
"FudgeMsg" -&amp;gt; "DefaultFudgeMsg" / "SimpleFudgeMsg" / "StandardFudgeMsg" / "FudgeMsgImpl"&lt;/p&gt;

&lt;p&gt;The ImmutableFudgeFieldContainer and fields also need looking at.&lt;/p&gt;</comment>
                    <comment id="10336" author="jim" created="Fri, 1 Apr 2011 11:56:40 +0100">&lt;p&gt;I think these renames are a good idea.  It's been confusing for too long.&lt;/p&gt;</comment>
                    <comment id="10337" author="stephen" created="Wed, 6 Apr 2011 17:08:42 +0100">&lt;p&gt;Current batch of changes is complete (see release notes)&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                <outwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10323">FRJ-99</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-108] Time zone id type</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-108</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Consider whether to add a time-zone id type(s). The current approach writes out a string which is quite long and wasteful.&lt;/p&gt;

&lt;p&gt;Most time-zone ids are based on the TZ database (Olson). Of these, probably less than 100 are commonly used (such as "Europe/London" or "Asia/Tokyo"). The rest typically share a set of common prefixes ("Europe"/"Asia"/...). Thus, the encoded format could use 1 byte to define 0 for simpe string, 1 to 15 for prefixes and 16 to 255 for full strings.&lt;/p&gt;

&lt;p&gt;The curve-ball is that JSR-310 allows time-zone-ids to be prefix by an optional supplier (eg. "Windows" or "TZDB") and suffixed by an optional version (eg. "#2011b"). Note that "TZDB" is the default prefix and assumed if not specified.&lt;/p&gt;

&lt;p&gt;If this change is made, then the date/time encoding should be extended to allow ZonedDateTime to be sent natively.&lt;/p&gt;</description>
                <environment/>
            <key id="10343">FRJ-108</key>
            <summary>Time zone id type</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Thu, 31 Mar 2011 16:47:04 +0100</created>
                <updated>Thu, 31 Mar 2011 16:47:04 +0100</updated>
                                                                    <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-107] Add support for Year and YearMonth as secondary types</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-107</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Add support for Year and YearMonth as secondary types.&lt;/p&gt;</description>
                <environment/>
            <key id="10342">FRJ-107</key>
            <summary>Add support for Year and YearMonth as secondary types</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Thu, 31 Mar 2011 16:37:48 +0100</created>
                <updated>Thu, 31 Mar 2011 16:57:19 +0100</updated>
                    <resolved>Thu, 31 Mar 2011 16:38:21 +0100</resolved>
                                            <fixVersion>0.4</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-106] Remove generics from FudgeFieldType</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-106</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Remove generics from FudgeFieldType. Almost every usage uses &amp;lt;?&amp;gt;, so the generics is hurting, not helping.&lt;/p&gt;</description>
                <environment/>
            <key id="10341">FRJ-106</key>
            <summary>Remove generics from FudgeFieldType</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Tue, 29 Mar 2011 11:35:22 +0100</created>
                <updated>Thu, 31 Mar 2011 16:57:56 +0100</updated>
                    <resolved>Tue, 29 Mar 2011 15:19:52 +0100</resolved>
                                            <fixVersion>0.4</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10331" author="kirk" created="Tue, 29 Mar 2011 11:48:31 +0100">&lt;p&gt;I'd defer this to not 0.xnext, but 0.xNext+1 for the same reasons as &lt;a href="http://jira.fudgemsg.org/browse/FRJ-105" title="Refactor package hierarchy"&gt;&lt;del&gt;FRJ-105&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-105] Refactor package hierarchy</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-105</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Refactor package hierarchy to simplify first view of Fudge. Currently, the top level package contains a lot of concepts, making it hard to grasp. Simplify this by reducing it primarily to the main object model.&lt;/p&gt;

&lt;p&gt;Also, expand the "wire" package to include the wire types separately from the secondary types.&lt;/p&gt;</description>
                <environment/>
            <key id="10340">FRJ-105</key>
            <summary>Refactor package hierarchy</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Tue, 29 Mar 2011 11:18:56 +0100</created>
                <updated>Fri, 1 Apr 2011 17:31:52 +0100</updated>
                    <resolved>Fri, 1 Apr 2011 17:31:52 +0100</resolved>
                                            <fixVersion>0.4</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10330" author="kirk" created="Tue, 29 Mar 2011 11:47:56 +0100">&lt;p&gt;Might it not make sense to postpone to the next 0. release? We've got a LOT of changes that should be pushed as a 0.XNext before doing things that would break existing code.&lt;/p&gt;</comment>
                    <comment id="10332" author="stephen" created="Tue, 29 Mar 2011 13:37:40 +0100">&lt;p&gt;v0.3 was released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-104] FudgeXMLStreamReader should create submessage for additional attributes </title>
                <link>http://jira.fudgemsg.org/browse/FRJ-104</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;if there are any additional attributes, then create a Fudge submessage named "@foo" (where foo is the Fudge field name from above). This submessage must be added to the Fudge message before the actual Fudge field itself. &lt;br/&gt;
The submessage must contain one field for each attribute (with a name and value, type of string)&lt;/p&gt;

&lt;p&gt;The writer should handle the generation of any @foo Fudge field into additional attributes.&lt;/p&gt;</description>
                <environment/>
            <key id="10335">FRJ-104</key>
            <summary>FudgeXMLStreamReader should create submessage for additional attributes </summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="yomi">Abayomi Ayodele</reporter>
                        <labels>
                    </labels>
                <created>Thu, 24 Mar 2011 10:18:50 +0000</created>
                <updated>Thu, 24 Mar 2011 10:19:17 +0000</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                            <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10333">FRJ-102</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-103] In FudgeJSONStreamReader, the keys collection is sorted and not in message order, needs fixing</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-103</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;I have turned off FudgeJSONTest unit tests at the moment.&lt;/p&gt;</description>
                <environment/>
            <key id="10334">FRJ-103</key>
            <summary>In FudgeJSONStreamReader, the keys collection is sorted and not in message order, needs fixing</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="yomi">Abayomi Ayodele</reporter>
                        <labels>
                    </labels>
                <created>Wed, 23 Mar 2011 16:58:56 +0000</created>
                <updated>Wed, 23 Mar 2011 16:58:56 +0000</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-102] create a human readable FudgeXmlWriter and FudgeXmlReader</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-102</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;The proposed format is something like&lt;/p&gt;

&lt;p&gt;&amp;lt;message processing="0" version="0" taxonomy="0"&amp;gt;&lt;br/&gt;
  &amp;lt;field name="surname" ordinal="0" type="16"&amp;gt;Colebourne&amp;lt;/field&amp;gt;&lt;br/&gt;
  &amp;lt;field name="forename" ordinal="1" type="16"&amp;gt;Stephen&amp;lt;/field&amp;gt;&lt;br/&gt;
  &amp;lt;field name="address" ordinal="2" type="14"&amp;gt;&lt;br/&gt;
    &amp;lt;field name="number" type="4"&amp;gt;85&amp;lt;/field&amp;gt;&lt;br/&gt;
    &amp;lt;field name="city" type="16"&amp;gt;London&amp;lt;/field&amp;gt;&lt;br/&gt;
  &amp;lt;/field&amp;gt;&lt;br/&gt;
  &amp;lt;field name="memberships" ordinal="3" type="14"&amp;gt;&lt;br/&gt;
    &amp;lt;field type="16"&amp;gt;NT&amp;lt;/field&amp;gt;&lt;br/&gt;
    &amp;lt;field type="16"&amp;gt;EHFME&amp;lt;/field&amp;gt;&lt;br/&gt;
  &amp;lt;/field&amp;gt;&lt;br/&gt;
&amp;lt;/message&amp;gt;&lt;/p&gt;
</description>
                <environment/>
            <key id="10333">FRJ-102</key>
            <summary>create a human readable FudgeXmlWriter and FudgeXmlReader</summary>
                <type id="3" iconUrl="http://jira.fudgemsg.org/images/icons/task.gif">Task</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="yomi">Abayomi Ayodele</assignee>
                                <reporter username="yomi">Abayomi Ayodele</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Mar 2011 11:14:41 +0000</created>
                <updated>Thu, 31 Mar 2011 17:00:00 +0100</updated>
                    <resolved>Thu, 24 Mar 2011 10:19:27 +0000</resolved>
                                            <fixVersion>0.4</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10324" author="kirk" created="Fri, 18 Mar 2011 11:18:33 +0000">&lt;p&gt;Where fields have names we should use the names for the element names. So your sample message would be:&lt;br/&gt;
&amp;lt;message ...&amp;gt;&lt;br/&gt;
  &amp;lt;surname ordinal="0" type="16"&amp;gt;Colebourne&amp;lt;/surname&amp;gt;&lt;br/&gt;
  &amp;lt;forename ...&amp;gt;Stephen&amp;lt;/forename&amp;gt;&lt;br/&gt;
&amp;lt;/&amp;gt;&lt;/p&gt;

&lt;p&gt;There should also be an option to "name" the message on the writer, so that you could then have:&lt;br/&gt;
&amp;lt;person&amp;gt;&lt;br/&gt;
  &amp;lt;surname&amp;gt;...&amp;lt;/&amp;gt;&lt;br/&gt;
  ...&lt;br/&gt;
&amp;lt;/person&amp;gt;&lt;/p&gt;</comment>
                    <comment id="10325" author="andrew" created="Fri, 18 Mar 2011 11:28:24 +0000">&lt;p&gt;I agree - use of the field name where possible is good. The fallback is then to &amp;lt;field ...&amp;gt; for any fields with either no name or a name that is not a valid XML token, e.g. &amp;lt;field name="&amp;gt;" ..&amp;gt;, and also the edge case of a field called "field" which would require &amp;lt;field name="field" ...&amp;gt;. Similar naming logic should apply to messages.&lt;/p&gt;

&lt;p&gt;Note the existing FudgeXMLStreamWriter implements the encoding defined on &lt;a href="http://wiki.fudgemsg.org/display/FDG/XML+Fudge+Messages"&gt;http://wiki.fudgemsg.org/display/FDG/XML+Fudge+Messages&lt;/a&gt;. This document should first be updated to reflect the suggested changes.&lt;/p&gt;</comment>
                    <comment id="10326" author="stephen" created="Fri, 18 Mar 2011 12:26:11 +0000">&lt;p&gt;There are clearly multiple possible encodings of a Fudge message as a string. Just using the name as the tag doesn't work as Andrew points out (the name might be missing or get mangled, requiring a name attribute anyway).&lt;/p&gt;

&lt;p&gt;If the goal is simply to convert to &lt;b&gt;an&lt;/b&gt; XML format that can be written and read, then the proposed scheme makes most sense. If the goal is to try and produce "good" XML then a variation of the current scheme is better.&lt;/p&gt;

&lt;p&gt;In my view, the XML that is produced is never going to be that good anyway, notably as there is no list encoding in a Fudge message, at least for now (If there was a list encoding it would be used to represent lists in a nicer way in XML). See the "memberships" list in the example above. As such, I'd argue that users that care about an XML format should use XSLT on a &lt;b&gt;very&lt;/b&gt; simple and consistent format, ie the one above.&lt;/p&gt;

&lt;p&gt;And even if you don't like the format above on aesthetic grounds, its useful anyway as a simple way to document a Fudge message because the concepts map 1to1 to the binary format. The importance of that shouldn't be underestimated.&lt;/p&gt;</comment>
                    <comment id="10327" author="kirk" created="Fri, 18 Mar 2011 13:32:22 +0000">&lt;p&gt;I think we're getting hung up on what precisely we want the XML to look like. I see that there are numerous options that we can't forsee depending on the circumstances:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;A completely regular format (such as the original proposal) that allows XSLT to be easily written&lt;/li&gt;
	&lt;li&gt;A more user-friendly format (such as my suggestion) that more closely maps to what XML would be if it didn't get run through the Fudge system&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Aren't we really talking about two options here?&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;tt&gt;setMessageElementName(String)&lt;/tt&gt; to specify the name for the wrapper message&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;setUseFieldNamesForElements(bool)&lt;/tt&gt; to specify that field names should be used&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I can't imagine implementing these options would either clutter up the API or lead to difficulties in implementation.&lt;/p&gt;</comment>
                    <comment id="10328" author="kirk" created="Fri, 18 Mar 2011 13:55:04 +0000">&lt;p&gt;We just had a confab in person on what we believe the limitations of &lt;a href="http://jira.fudgemsg.org/browse/FRJ-102" title="create a human readable FudgeXmlWriter and FudgeXmlReader"&gt;&lt;del&gt;FRJ-102&lt;/del&gt;&lt;/a&gt; are, and here they are:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Fudge --&amp;gt; XML --&amp;gt; Fudge has to produce the same Fudge message as originally produced&lt;/li&gt;
	&lt;li&gt;XML --&amp;gt; Fudge --&amp;gt; XML can produce XML that is slightly different from the original XML&lt;/li&gt;
	&lt;li&gt;Where possible, we'll accept XML in pretty much any format, though we may not translate it "correctly" into Fudge types&lt;/li&gt;
	&lt;li&gt;Both output formats (from my previous comment) will be allowed&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When we've done that, once everybody's happy with that version, we can file further issues for improvements/enhancements.&lt;/p&gt;</comment>
                    <comment id="10329" author="stephen" created="Fri, 18 Mar 2011 14:36:02 +0000">&lt;p&gt;OK, so we need to add Fudge settings for writing to handle&lt;/p&gt;
&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;name of the "message" element - "message" by default&lt;/li&gt;
	&lt;li&gt;whether to try to write names as element names - true by default - weird names will need a name attribute anyway&lt;/li&gt;
	&lt;li&gt;whether to write roundtrip info, version, taxonomy, type, ordinal attributes - true by default&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The reader should cope with most structred XML (elements and attributes, but not mixed content).&lt;/p&gt;
&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;each element is a field&lt;/li&gt;
	&lt;li&gt;if the element name is "field" and there is a name attribute, then use the name attribute as the Fudge field name&lt;/li&gt;
	&lt;li&gt;if the element name is "field" and there is no name attribute, then there is no Fudge field name&lt;/li&gt;
	&lt;li&gt;if the element name is not "field" and there is a name attribute, then use the name attribute as the Fudge field name&lt;/li&gt;
	&lt;li&gt;if the element name is not "field" and there is no name attribute, then use the element name as the Fudge field name&lt;/li&gt;
	&lt;li&gt;use any ordinal or type attribute to infer Fudge info, otherwise assume a type of string or submessage&lt;/li&gt;
	&lt;li&gt;if there are any additional attributes, then create a Fudge submessage named "@foo" (where foo is the Fudge field name from above). This submessage must be added to the Fudge message before the actual Fudge field itself. The submessage must contain one field for each attribute (with a name and value, type of string)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The writer should use the settings above, plus handle the generation of any @foo Fudge field into additional attributes.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                <outwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10335">FRJ-104</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-101] XPath navigation for fields in a FudgeFieldContainer</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-101</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;If you hold onto a &lt;tt&gt;FudgeFieldContainer&lt;/tt&gt;, it should be possible to extract our individual elements using XPath expressions (precisely as if you were holding XML with all elements and no attributes).&lt;/p&gt;</description>
                <environment/>
            <key id="10332">FRJ-101</key>
            <summary>XPath navigation for fields in a FudgeFieldContainer</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="5" iconUrl="http://jira.fudgemsg.org/images/icons/priority_trivial.gif">Trivial</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Tue, 15 Mar 2011 13:48:32 +0000</created>
                <updated>Tue, 15 Mar 2011 13:48:32 +0000</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-100] Add empty immutable taxonomy</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-100</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Add empty immutable taxonomy - MapFudgeTaxonomy.EMPTY&lt;/p&gt;</description>
                <environment/>
            <key id="10331">FRJ-100</key>
            <summary>Add empty immutable taxonomy</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Thu, 3 Mar 2011 17:22:27 +0000</created>
                <updated>Thu, 3 Mar 2011 17:22:55 +0000</updated>
                    <resolved>Thu, 3 Mar 2011 17:22:55 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-99] Rename FudgeMsgField to ImmutableFudgeField</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-99</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Rename FudgeMsgField to ImmutableFudgeField.&lt;br/&gt;
Make it truly immutable (final).&lt;br/&gt;
Remove constructor (use factory methods).&lt;/p&gt;</description>
                <environment/>
            <key id="10323">FRJ-99</key>
            <summary>Rename FudgeMsgField to ImmutableFudgeField</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Feb 2011 12:52:20 +0000</created>
                <updated>Wed, 1 Jun 2011 14:03:51 +0100</updated>
                    <resolved>Wed, 1 Jun 2011 14:03:51 +0100</resolved>
                            <version>0.3</version>
                                <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10338" author="stephen" created="Wed, 1 Jun 2011 14:03:51 +0100">&lt;p&gt;Was renamed to UnmodifiableFudgeField&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                <outwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10322">FRJ-98</issuekey>
        </issuelink>
                    </outwardlinks>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10344">FRJ-109</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-98] Use factory methods for FudgeMsgField</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-98</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Use factory methods for FudgeMsgField.&lt;/p&gt;

&lt;p&gt;As an immutable class there is the potential for caching instances.&lt;/p&gt;</description>
                <environment/>
            <key id="10322">FRJ-98</key>
            <summary>Use factory methods for FudgeMsgField</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Feb 2011 12:31:22 +0000</created>
                <updated>Fri, 18 Feb 2011 12:52:40 +0000</updated>
                    <resolved>Fri, 18 Feb 2011 12:50:57 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10313" author="stephen" created="Fri, 18 Feb 2011 12:50:57 +0000">&lt;p&gt;Lots of factory methods added, including one that creates a copy only if necessary.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10323">FRJ-99</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-97] UTC date times are not deserialised correctly when the local calendar is not UTC</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-97</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;JavaUtilCalendarFieldType uses a local calendar to deserialise date time instances.  It sets the time zone offset of the calendar from the incoming time object, but only if it's non-zero.  This causes invalid times when the local calendar has a non-zero offset.&lt;/p&gt;

&lt;p&gt;This is currently breaking org.fudgemsg.DateTimeTest.dateCycle() when run outside of the UK (in Hong Kong for example).&lt;/p&gt;</description>
                <environment/>
            <key id="10321">FRJ-97</key>
            <summary>UTC date times are not deserialised correctly when the local calendar is not UTC</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="coxsim">Simon Cox</reporter>
                        <labels>
                    </labels>
                <created>Fri, 31 Dec 2010 05:48:23 +0000</created>
                <updated>Thu, 31 Mar 2011 17:02:33 +0100</updated>
                    <resolved>Wed, 5 Jan 2011 11:37:26 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10310" author="coxsim" created="Fri, 31 Dec 2010 05:49:37 +0000">&lt;p&gt;Stack of dateCycle failure:&lt;/p&gt;

&lt;p&gt;java.lang.AssertionError: expected:&amp;lt;Fri Mar 05 18:12:13 CST 2010&amp;gt; but was:&amp;lt;Fri Mar 05 10:12:13 CST 2010&amp;gt;&lt;br/&gt;
	at org.junit.Assert.fail(Assert.java:91)&lt;br/&gt;
	at org.junit.Assert.failNotEquals(Assert.java:645)&lt;br/&gt;
	at org.junit.Assert.assertEquals(Assert.java:126)&lt;br/&gt;
	at org.junit.Assert.assertEquals(Assert.java:145)&lt;br/&gt;
	at org.fudgemsg.DateTimeTest.dateCycle(DateTimeTest.java:344)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)&lt;br/&gt;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)&lt;br/&gt;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)&lt;br/&gt;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)&lt;br/&gt;
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)&lt;br/&gt;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)&lt;br/&gt;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)&lt;br/&gt;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)&lt;br/&gt;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)&lt;br/&gt;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)&lt;br/&gt;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)&lt;br/&gt;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)&lt;br/&gt;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&lt;/p&gt;</comment>
                    <comment id="10311" author="coxsim" created="Fri, 31 Dec 2010 06:23:08 +0000">&lt;p&gt;This can be fixed by using FudgeTime.hasTimezoneOffset(): &lt;a href="https://github.com/coxsim/Fudge-Java/commit/f66e21fd29ebc0a1351f3afe669da190cf341945"&gt;https://github.com/coxsim/Fudge-Java/commit/f66e21fd29ebc0a1351f3afe669da190cf341945&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="10312" author="andrew" created="Wed, 5 Jan 2011 11:37:26 +0000">&lt;p&gt;Resolved by patch submitted by Simon Cox.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-96] Ability to transform messages to handle format changes</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-96</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;At present there is no direct handling for a change in the format of a message. The is a problem if two ends of a connection have different versions, or if the message has been persisted such as in a database.&lt;/p&gt;

&lt;p&gt;The solution wuold appear to be a transforming FudgeStreamReader that can understand and alter the message as it is read in. This would allow package renames and field renames to be handled relatively easily (although identifying what the message represents may be tricky). Message structure changes should also be possible, but are more tricky to handle.&lt;/p&gt;</description>
                <environment/>
            <key id="10320">FRJ-96</key>
            <summary>Ability to transform messages to handle format changes</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="stephen">Stephen Colebourne</reporter>
                        <labels>
                    </labels>
                <created>Thu, 9 Dec 2010 12:00:31 +0000</created>
                <updated>Thu, 9 Dec 2010 12:00:31 +0000</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-95] FudgeJSONStreamWriter fails for non-primitive arrays</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-95</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;The array convention of a repeated field with no name or ordinal fails in the JSON library with the second element's duplicate key (the empty string). The array convention needs to be detected so that the contents of the repeated fields can be serialised as an actual JSON array, exactly like primitive arrays.&lt;/p&gt;</description>
                <environment/>
            <key id="10311">FRJ-95</key>
            <summary>FudgeJSONStreamWriter fails for non-primitive arrays</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jonathan">Jonathan Senior</reporter>
                        <labels>
                    </labels>
                <created>Thu, 28 Oct 2010 17:51:37 +0100</created>
                <updated>Thu, 28 Oct 2010 17:51:37 +0100</updated>
                                    <version>0.2</version>
                                                <component>JSON</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-94] Type dictionary conversion of arrays to strings doesn't give meaningful data</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-94</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;The default .toString is used for anything that is passed to the string converter. The implementation of toString for arrays give a not very useful type symbol and hashcode. A delimited list of values would be a more useful representation.&lt;/p&gt;</description>
                <environment/>
            <key id="10310">FRJ-94</key>
            <summary>Type dictionary conversion of arrays to strings doesn't give meaningful data</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Thu, 21 Oct 2010 12:37:54 +0100</created>
                <updated>Thu, 21 Oct 2010 12:37:54 +0100</updated>
                                    <version>0.2</version>
                                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-93] Annotation-based builder configuration doesn't support generic builders</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-93</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Needs to have an optional parameter on the annotation and call FudgeBuilderFactory.addGenericBuilder().&lt;/p&gt;</description>
                <environment/>
            <key id="10300">FRJ-93</key>
            <summary>Annotation-based builder configuration doesn't support generic builders</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 25 Aug 2010 19:28:41 +0100</created>
                <updated>Thu, 26 Aug 2010 11:15:15 +0100</updated>
                    <resolved>Thu, 26 Aug 2010 11:15:15 +0100</resolved>
                            <version>0.3</version>
                                <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10291" author="kirk" created="Thu, 26 Aug 2010 11:15:15 +0100">&lt;p&gt;Commit pushed to OpenGamma/Fudge-Java.git&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-92] Annotation-based configuration of secondary types</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-92</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;This should be similar to the annotation-based configuration of builders.&lt;/p&gt;</description>
                <environment/>
            <key id="10299">FRJ-92</key>
            <summary>Annotation-based configuration of secondary types</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 25 Aug 2010 16:15:36 +0100</created>
                <updated>Wed, 25 Aug 2010 17:22:25 +0100</updated>
                    <resolved>Wed, 25 Aug 2010 17:22:25 +0100</resolved>
                                            <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10290" author="kirk" created="Wed, 25 Aug 2010 17:22:25 +0100">&lt;p&gt;Change pushed to OpenGamma/Fudge-Java.git&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-91] Scan Class-Path in MANIFEST.MF for builder detection</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-91</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now we scan the java.class.path system property to determine jar files to automatically check for builders.&lt;/p&gt;

&lt;p&gt;However, if you're using a "java -jar" launcher, and you explicitly put in a Class-Path entry in the MANIFEST.MF for that jar to specify &lt;b&gt;other&lt;/b&gt; Jars that should be on the classpath, that doesn't show up in the java.class.path system property.&lt;/p&gt;

&lt;p&gt;We should attempt to scan that where present to load all potential jars.&lt;/p&gt;</description>
                <environment/>
            <key id="10298">FRJ-91</key>
            <summary>Scan Class-Path in MANIFEST.MF for builder detection</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 25 Aug 2010 14:27:55 +0100</created>
                <updated>Wed, 25 Aug 2010 14:27:55 +0100</updated>
                                                                    <component>Core</component>
                <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-90] Automatically scan the classpath for builders if a property is set</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-90</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description/>
                <environment/>
            <key id="10297">FRJ-90</key>
            <summary>Automatically scan the classpath for builders if a property is set</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 25 Aug 2010 14:23:05 +0100</created>
                <updated>Wed, 25 Aug 2010 15:09:33 +0100</updated>
                    <resolved>Wed, 25 Aug 2010 15:09:33 +0100</resolved>
                            <version>0.3</version>
                                <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-89] Only scan the classpath once for builder detection</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-89</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now we could scan it multiple times if people are lax in controlling their builder bootstrapping.&lt;/p&gt;</description>
                <environment/>
            <key id="10296">FRJ-89</key>
            <summary>Only scan the classpath once for builder detection</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 25 Aug 2010 14:21:54 +0100</created>
                <updated>Wed, 25 Aug 2010 15:09:26 +0100</updated>
                    <resolved>Wed, 25 Aug 2010 15:09:26 +0100</resolved>
                            <version>0.3</version>
                                <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-88] Make FudgeFieldContainer and MutableFudgeFieldContainer have better support as a Map&lt;String, Object&gt;</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-88</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;We can't support the full signatures in FudgeMsg at the moment, but we can easily support a subset, and this would be an easy way to use FudgeMsg as a backing place for situations like the MongoDB client library that have (or will have) optimizations for Map&amp;lt;&amp;gt; instances.&lt;/p&gt;

&lt;p&gt;It also means that we can get FudgeMsg into more situations where a Map is otherwise necessary and simplify a lot of iteration type work.&lt;/p&gt;

&lt;p&gt;For more background on the MongoDB side see &lt;a href="http://jira.mongodb.org/browse/JAVA-153"&gt;http://jira.mongodb.org/browse/JAVA-153&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Three options here:&lt;br/&gt;
1) Make FudgeFieldContainer directly extend Map&amp;lt;String, Object&amp;gt;&lt;br/&gt;
2) Give FudgeFieldContainer a .asMap() method that returns a projection as a Map of the underlying FudgeFieldContainer&lt;br/&gt;
3) Make this a FudgeMsg specific optimization.&lt;/p&gt;</description>
                <environment/>
            <key id="10295">FRJ-88</key>
            <summary>Make FudgeFieldContainer and MutableFudgeFieldContainer have better support as a Map&lt;String, Object&gt;</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Tue, 24 Aug 2010 18:57:53 +0100</created>
                <updated>Fri, 18 Feb 2011 12:54:21 +0000</updated>
                                                                    <component>Core</component>
                <component>MongoDB</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-87] Automatically configure builders by scanning for annotations on builder objects</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-87</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Much like &lt;a href="http://jira.fudgemsg.org/browse/FRJ-86" title="Automatically configure Builders using annotations on target classes"&gt;&lt;del&gt;FRJ-86&lt;/del&gt;&lt;/a&gt;, we should be able to annotate a builder class as being automatically registered for a given type (which may not be aware of Fudge at all). In that case, when encountering a type that it isn't familiar with, an unconfigured FudgeContext should then scan for all annotations of that type (using the scannotations project) to see if there's a builder in the classpath for that type.&lt;/p&gt;</description>
                <environment/>
            <key id="10294">FRJ-87</key>
            <summary>Automatically configure builders by scanning for annotations on builder objects</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Tue, 24 Aug 2010 10:07:02 +0100</created>
                <updated>Tue, 24 Aug 2010 14:11:34 +0100</updated>
                    <resolved>Tue, 24 Aug 2010 14:11:33 +0100</resolved>
                                            <fixVersion>0.3</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10284" author="stephen" created="Tue, 24 Aug 2010 10:18:48 +0100">&lt;p&gt;The dependency is small, and I've written it before myself based on examples. We could repackage the dependency within Fudge itself. Performance depends on how many classes are scanned. Generally you do *Builder in a case like this.&lt;/p&gt;</comment>
                    <comment id="10285" author="kirk" created="Tue, 24 Aug 2010 10:25:31 +0100">&lt;p&gt;Actually, it appears to be a completely self-contained project, which is good. Seems like something we should consider adding. I'll package it up for the Fudge Ivy repository now.&lt;/p&gt;</comment>
                    <comment id="10286" author="kirk" created="Tue, 24 Aug 2010 10:36:31 +0100">&lt;p&gt;Scannotation 1.0.2 added to Fudge Ivy repository. org.scannotation/scannotation/1.0.2 when someone implements this.&lt;/p&gt;</comment>
                    <comment id="10289" author="kirk" created="Tue, 24 Aug 2010 14:11:34 +0100">&lt;p&gt;Implemented and pushed to OpenGamma/Fudge-Java.git&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10293">FRJ-86</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-86] Automatically configure Builders using annotations on target classes</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-86</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;In the case where there is a target class as well as a builder, currently you have to manually configure the builder in each FudgeContext in which you'd like to use it.&lt;/p&gt;

&lt;p&gt;However, it should be possible to have an annotation on the target class, which specifies the class of the builder to be used. When a FudgeContext encounters a target class for processing, where there isn't a specific builder in place, but where this annotation is present, it should configure itself to use the specified builder.&lt;/p&gt;</description>
                <environment/>
            <key id="10293">FRJ-86</key>
            <summary>Automatically configure Builders using annotations on target classes</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Mon, 23 Aug 2010 12:40:36 +0100</created>
                <updated>Tue, 24 Aug 2010 12:47:28 +0100</updated>
                    <resolved>Tue, 24 Aug 2010 12:47:28 +0100</resolved>
                            <version>0.3</version>
                                <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10282" author="stephen" created="Tue, 24 Aug 2010 09:58:03 +0100">&lt;p&gt;The annotation should be on the builder class, not the target class. This further separates the two classes.&lt;/p&gt;

&lt;p&gt;Annotation scanning (scannotation project) should be used to find all builders in the classpath/spring config at startup (as with JAXRS etc)&lt;/p&gt;</comment>
                    <comment id="10283" author="kirk" created="Tue, 24 Aug 2010 10:08:02 +0100">&lt;p&gt;That's definitely an option as well where you need an external builder for a pre-existing class, but it's far more computationally expensive (particularly if people get into the habit of creating too many new FudgeContext instances.&lt;/p&gt;

&lt;p&gt;In addition, it requires more external dependencies, which will require a new Ivy context for people who don't want that functionality if we can do it (which we might not).&lt;/p&gt;

&lt;p&gt;I think the two are very similar ideas, but not the exact same. Both quite useful.&lt;/p&gt;

&lt;p&gt;Filed that as &lt;a href="http://jira.fudgemsg.org/browse/FRJ-87" title="Automatically configure builders by scanning for annotations on builder objects"&gt;&lt;del&gt;FRJ-87&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="10288" author="kirk" created="Tue, 24 Aug 2010 12:47:28 +0100">&lt;p&gt;Pushed to OpenGamma/Fudge-Java.git&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                <outwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10294">FRJ-87</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-85] MongoDB/Fudge testing is inadequate</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-85</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Recently when working with the Fudge/MongoDB integration I detected a huge number of problems with the mapping in downstream projects. This implies to me that the generic integration work is simply insufficient for the amount of functionality involved.&lt;/p&gt;</description>
                <environment/>
            <key id="10292">FRJ-85</key>
            <summary>MongoDB/Fudge testing is inadequate</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Mon, 23 Aug 2010 09:59:59 +0100</created>
                <updated>Mon, 23 Aug 2010 09:59:59 +0100</updated>
                                    <version>0.2</version>
                <version>0.3</version>
                                                <component>MongoDB</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-84] MongoDBFudgeBuilder can't handle FudgeDate, FudgeTime, or FudgeDateTime</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-84</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;This must be added, as we have explicit encoding rules for these.&lt;/p&gt;</description>
                <environment/>
            <key id="10291">FRJ-84</key>
            <summary>MongoDBFudgeBuilder can't handle FudgeDate, FudgeTime, or FudgeDateTime</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Fri, 20 Aug 2010 18:16:35 +0100</created>
                <updated>Fri, 18 Feb 2011 12:53:45 +0000</updated>
                                    <version>0.3</version>
                                                <component>MongoDB</component>
                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10281" author="kirk" created="Fri, 20 Aug 2010 18:23:35 +0100">&lt;p&gt;Mongo by default DOES handle java.util.Date, but it encodes it as a string with full representation in GMT. Given that we've gone with explicitly having a separation between dates, times, and datetimes, we should almost certainly do this in a different way.&lt;/p&gt;

&lt;p&gt;We could do this by going down to ints (the way they're encoded in a Fudge field), but that might not be the best approach as we won't have the knowledge of how to translate them back on the other end because we won't have sufficient metadata.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-83] MongoDBFudgeBuilder doesn't support types correctly</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-83</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;It assumes that all data that has been provided as a value is capable of being handled by the underlying BSON implementation in MongoDB. However, that's not always the case, particularly when secondary types and builders are involved.&lt;/p&gt;

&lt;p&gt;We need to incorporate the type dictionary more fully in the MongoDBFudgeBuilder.&lt;/p&gt;</description>
                <environment/>
            <key id="10290">FRJ-83</key>
            <summary>MongoDBFudgeBuilder doesn't support types correctly</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Fri, 20 Aug 2010 17:37:31 +0100</created>
                <updated>Fri, 20 Aug 2010 18:20:55 +0100</updated>
                    <resolved>Fri, 20 Aug 2010 18:20:55 +0100</resolved>
                            <version>0.3</version>
                                <fixVersion>0.3</fixVersion>
                                <component>MongoDB</component>
                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10280" author="kirk" created="Fri, 20 Aug 2010 18:20:55 +0100">&lt;p&gt;Fix pushed to OpenGamma/Fudge-Java repository.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-82] Upgrade to MongoDB Java driver 2.1</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-82</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description/>
                <environment/>
            <key id="10282">FRJ-82</key>
            <summary>Upgrade to MongoDB Java driver 2.1</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Sat, 7 Aug 2010 04:51:41 +0100</created>
                <updated>Tue, 24 Aug 2010 11:57:07 +0100</updated>
                    <resolved>Tue, 24 Aug 2010 11:57:07 +0100</resolved>
                                            <fixVersion>0.3</fixVersion>
                                <component>MongoDB</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10287" author="kirk" created="Tue, 24 Aug 2010 11:57:07 +0100">&lt;p&gt;Available in OpenGamma/Fudge-Java.git&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-81] Reflection-based serialization does not work on Maps</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-81</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;It's OK for simple Strings and Integers but I have variables such as&lt;/p&gt;

&lt;p&gt;Map&amp;lt;ComputationTargetSpecification, Integer&amp;gt; &lt;br/&gt;
Map&amp;lt;String, Integer&amp;gt;&lt;/p&gt;

&lt;p&gt;In the first case the ComputationTargetSpecification keys are not deserialized properly: the deserialized Map does not contain keys of type ComputationTargetSpecification.&lt;/p&gt;

&lt;p&gt;In the second case the problem is that the Integer values, when deserialized, come back as Shorts.&lt;/p&gt;</description>
                <environment/>
            <key id="10280">FRJ-81</key>
            <summary>Reflection-based serialization does not work on Maps</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="daniel">Daniel Kwiecinski</assignee>
                                <reporter username="pietari">Pietari Laurila</reporter>
                        <labels>
                    </labels>
                <created>Fri, 30 Jul 2010 06:04:59 +0100</created>
                <updated>Thu, 13 Oct 2011 18:04:01 +0100</updated>
                    <resolved>Thu, 13 Oct 2011 12:50:46 +0100</resolved>
                                            <fixVersion>0.4</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10434" author="daniel" created="Thu, 13 Oct 2011 12:50:46 +0100">&lt;p&gt;Maps, Sets and Lists are type-hinted on -1 and -2 ordinals with the common, concrete entries' class ancestor (if exists) &lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10445">FRN-92</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-80] SecondaryTypes backed by integers throw exceptions</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-80</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;The add method on FudgeMsg does the type narrowing for integral types. A secondary type backed by an integer can't be processed at that point. Two tasks: 1) add a check to suppress the behaviour on secondary types, 2) extend the hierarchy for an IntegralSecondaryType that can do the narrowing calculation based on the encoded integer size.&lt;/p&gt;</description>
                <environment/>
            <key id="10268">FRJ-80</key>
            <summary>SecondaryTypes backed by integers throw exceptions</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="5">Cannot Reproduce</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Sat, 3 Jul 2010 02:51:30 +0100</created>
                <updated>Wed, 1 Jun 2011 17:01:40 +0100</updated>
                    <resolved>Wed, 1 Jun 2011 17:01:40 +0100</resolved>
                                            <fixVersion>0.4</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10339" author="stephen" created="Wed, 1 Jun 2011 17:01:40 +0100">&lt;p&gt;Added a test which shows that this isn't a problem anymore.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-79] Default primitive type converters should allow string fields to numeric types</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-79</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;If a string field contains a textual representation of a number, it should be possible to call e.g. .getFieldValue(Double.class, field) on the type dictionary and the converters handle this. Currently it throws an IllegalArgumentException&lt;/p&gt;</description>
                <environment/>
            <key id="10267">FRJ-79</key>
            <summary>Default primitive type converters should allow string fields to numeric types</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 2 Jul 2010 04:41:11 +0100</created>
                <updated>Fri, 2 Jul 2010 05:04:20 +0100</updated>
                    <resolved>Fri, 2 Jul 2010 05:04:20 +0100</resolved>
                                                            <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-78] Add a .containsField(String) method on FudgeFieldContainer</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-78</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;This would be significantly faster than the only approaches available now, which either involve loading the field itself, or checking to see whether the list of available fields with that name is non-empty.&lt;/p&gt;</description>
                <environment/>
            <key id="10261">FRJ-78</key>
            <summary>Add a .containsField(String) method on FudgeFieldContainer</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="3">Duplicate</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Tue, 15 Jun 2010 01:09:59 +0100</created>
                <updated>Tue, 15 Jun 2010 01:19:17 +0100</updated>
                    <resolved>Tue, 15 Jun 2010 01:19:17 +0100</resolved>
                                            <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10254" author="andrew" created="Tue, 15 Jun 2010 01:19:17 +0100">&lt;p&gt;Duplicates &lt;a href="http://jira.fudgemsg.org/browse/FRJ-59" title="FudgeFieldContainer should have methods hasField(String name) and hasField(int ordinal)"&gt;&lt;del&gt;FRJ-59&lt;/del&gt;&lt;/a&gt;, but with a suggestion for containsField rather than .hasField&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-77] Extract non-Ordinal methods from FudgeFieldContainer and MutableFudgeFieldContainer to new interfaces</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-77</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Reviewers have noted that FudgeFieldContainer is really a meta-level interface, and can be implemented (without ordinal support) by a number of different back-end transport implementations (such as XML or JSON).&lt;/p&gt;

&lt;p&gt;We should extract out the pieces of FudgeFieldContainer and MutableFudgeFieldContainer that really aren't Fudge-specific and have separate interfaces for those.&lt;/p&gt;</description>
                <environment/>
            <key id="10260">FRJ-77</key>
            <summary>Extract non-Ordinal methods from FudgeFieldContainer and MutableFudgeFieldContainer to new interfaces</summary>
                <type id="3" iconUrl="http://jira.fudgemsg.org/images/icons/task.gif">Task</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Thu, 10 Jun 2010 22:25:05 +0100</created>
                <updated>Fri, 18 Feb 2011 12:53:16 +0000</updated>
                                                                    <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10252" author="kirk" created="Sun, 13 Jun 2010 02:10:19 +0100">&lt;p&gt;I started working on this, and then realized that the most rational way to do this properly would require a significant number of changes to the Fudge Proto-generated code, which isn't particularly easy at the moment given the way we're doing code generation. Have to rethink this before we actually do the work (if we do it at all).&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-76] Put necessary jars in FudgeMsg private ivy</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-76</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;Commons-codec 1.4&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment/>
            <key id="10257">FRJ-76</key>
            <summary>Put necessary jars in FudgeMsg private ivy</summary>
                <type id="3" iconUrl="http://jira.fudgemsg.org/images/icons/task.gif">Task</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Thu, 27 May 2010 20:14:47 +0100</created>
                <updated>Thu, 27 May 2010 21:02:03 +0100</updated>
                    <resolved>Thu, 27 May 2010 21:02:03 +0100</resolved>
                                            <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-75] Upgrade JUnit to 4.8.x</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-75</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description/>
                <environment/>
            <key id="10256">FRJ-75</key>
            <summary>Upgrade JUnit to 4.8.x</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Thu, 27 May 2010 18:43:39 +0100</created>
                <updated>Thu, 27 May 2010 19:10:41 +0100</updated>
                    <resolved>Thu, 27 May 2010 19:10:41 +0100</resolved>
                                            <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10250" author="kirk" created="Thu, 27 May 2010 19:10:41 +0100">&lt;p&gt;Put new jar files in FudgeMsg Ivy repository and confirmed that they flow through in Ivy resolution.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-74] Create implementation of MongoDB's DBObject backed directly on a FudgeFieldContainer</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-74</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;At the moment we're using the Fudge mapping system to produce new versions of BasicDBObject when we need to do MongoDB interchange.&lt;/p&gt;

&lt;p&gt;However, it MIGHT be superior from a performance perspective to have a FudgeDBObject which wraps a FudgeFieldContainer and implements the MongoDB DBObject interface as a stepping stone to going straight to their BSON network layer.&lt;/p&gt;

&lt;p&gt;We should write this system and test it for performance.&lt;/p&gt;</description>
                <environment/>
            <key id="10254">FRJ-74</key>
            <summary>Create implementation of MongoDB's DBObject backed directly on a FudgeFieldContainer</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Tue, 25 May 2010 00:42:24 +0100</created>
                <updated>Tue, 15 Mar 2011 13:46:12 +0000</updated>
                                                                    <component>MongoDB</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10253" author="kirk" created="Sun, 13 Jun 2010 05:16:15 +0100">&lt;p&gt;Before doing this, I ran through some performance tests, with some reasonable results, over small (about 10 fields) and large (several hundred fields in multiple sub-messages) messages. For each one, I tested both just creating the objects (one approach based purely on BasicDBObject, the other based on creating FudgeMsg and then translating to BasicDBObject), as well as persisting to a remote MongoDB instance.&lt;/p&gt;

&lt;p&gt;CREATION, SMALL, BasicDBObject Direct : 512ms&lt;br/&gt;
CREATION, SMALL, FudgeMsg -&amp;gt; BasicDBObject : 1603ms&lt;br/&gt;
CREATION, LARGE, BasicDBObject Direct : 15240ms&lt;br/&gt;
CREATION, LARGE, FudgeMsg -&amp;gt; BasicDBObject: 23798ms&lt;/p&gt;

&lt;p&gt;So for creation, Fudge is 201% slower in the small object case, and 56% slower in the large object case&lt;/p&gt;

&lt;p&gt;PERSISTENCE, SMALL, BasicDBObject Direct : 67318ms&lt;br/&gt;
PERSISTENCE, SMALL, FudgeMsg -&amp;gt; BasicDBObject : 69464ms&lt;br/&gt;
PERSISTENCE, LARGE, BasicDBObject Direct : 59444ms&lt;br/&gt;
PERSISTENCE, LARGE, FudgeMsg -&amp;gt; BasicDBObject: 66234ms&lt;/p&gt;

&lt;p&gt;Once we factor in overall persistence time, Fudge is 3.18% slower in the small object case, and 11.4% slower in the large object case&lt;/p&gt;

&lt;p&gt;Moreover, my MongoDB instance was heavily CPU bound (mostly in kernel time, as it would be if it's hitting the network and disk as heavily as it was) for most of the tests, so I think the fixed cost part may actually trump for large numbers of objects.&lt;/p&gt;

&lt;p&gt;Based on this test, it definitely seems like it makes sense to try an approach where we have a FudgeDBObject which is backed directly on a FudgeFieldContainer and see if it performs well.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-73] MongoDB objects cannot be deserialized</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-73</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;At least not using the default context. The reason is:&lt;/p&gt;

&lt;p&gt;java.lang.IllegalArgumentException: Cannot determine a Fudge type for value 26f76b191682fa4bd10aca00 of type class com.mongodb.ObjectId&lt;br/&gt;
	at org.fudgemsg.FudgeMsg.add(FudgeMsg.java:94)&lt;br/&gt;
	at org.fudgemsg.FudgeMsg.add(FudgeMsg.java:76)&lt;br/&gt;
	at org.fudgemsg.mapping.MongoDBFudgeBuilder.buildMessage(MongoDBFudgeBuilder.java:69)&lt;br/&gt;
	at org.fudgemsg.mapping.MongoDBFudgeBuilder.buildMessage(MongoDBFudgeBuilder.java:34)&lt;br/&gt;
	at org.fudgemsg.mapping.FudgeSerializationContext.objectToFudgeMsg(FudgeSerializationContext.java:123)&lt;/p&gt;

&lt;p&gt;The workaround at the moment is to avoid deserializing 'main' objects (objects directly in a collection), and to deserialize sub-objects (objects contained in a main object) instead. This works because sub-objects do not have an ObjectId.&lt;/p&gt;</description>
                <environment/>
            <key id="10253">FRJ-73</key>
            <summary>MongoDB objects cannot be deserialized</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="pietari">Pietari Laurila</reporter>
                        <labels>
                    </labels>
                <created>Mon, 24 May 2010 23:47:35 +0100</created>
                <updated>Mon, 24 May 2010 23:56:31 +0100</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10248" author="kirk" created="Mon, 24 May 2010 23:56:31 +0100">&lt;p&gt;Before anybody looks at this, they should take care of &lt;a href="http://jira.fudgemsg.org/browse/FRJ-35" title="Upgrade MongoDB integration library to 1.4"&gt;&lt;del&gt;FRJ-35&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-72] Deprecate setNamesFromTaxonomy</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-72</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;The logic would be more useful as an option within FudgeMsgReader - allowing it to "inflate" the names from the taxonomy as fields are decoded.&lt;/p&gt;</description>
                <environment/>
            <key id="10248">FRJ-72</key>
            <summary>Deprecate setNamesFromTaxonomy</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Thu, 13 May 2010 15:56:22 +0100</created>
                <updated>Thu, 13 May 2010 15:56:22 +0100</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-71] setNamesFromTaxonomy should be in FudgeMsg not FudgeMsgBase</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-71</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;At the moment it is in the abstract base, so is exposed through ImmutableFudgeMsg, allowing field content to be changed.&lt;/p&gt;</description>
                <environment/>
            <key id="10247">FRJ-71</key>
            <summary>setNamesFromTaxonomy should be in FudgeMsg not FudgeMsgBase</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Thu, 13 May 2010 15:54:38 +0100</created>
                <updated>Thu, 13 May 2010 15:54:38 +0100</updated>
                                    <version>0.3</version>
                                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-70] Remove readahead from FudgeMsgReader</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-70</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;A NULL return from a FudgeStreamReader on next will remove the need for a readahead fail test to detect EOF.&lt;/p&gt;</description>
                <environment/>
            <key id="10246">FRJ-70</key>
            <summary>Remove readahead from FudgeMsgReader</summary>
                <type id="5" iconUrl="http://jira.fudgemsg.org/images/icons/issue_subtask.gif">Sub-task</type>
                    <parent id="10244">FRJ-68</parent>
                        <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Thu, 13 May 2010 15:01:06 +0100</created>
                <updated>Thu, 13 May 2010 19:35:26 +0100</updated>
                    <resolved>Thu, 13 May 2010 19:35:25 +0100</resolved>
                                                            <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10241" author="andrew" created="Thu, 13 May 2010 19:35:26 +0100">&lt;p&gt;Resolved in OpenGamma/Fudge-Java repo&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-69] FudgeJSONStreamReader next() to return NULL on EOF at message boundary</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-69</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description/>
                <environment/>
            <key id="10245">FRJ-69</key>
            <summary>FudgeJSONStreamReader next() to return NULL on EOF at message boundary</summary>
                <type id="5" iconUrl="http://jira.fudgemsg.org/images/icons/issue_subtask.gif">Sub-task</type>
                    <parent id="10244">FRJ-68</parent>
                        <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Thu, 13 May 2010 14:58:39 +0100</created>
                <updated>Thu, 13 May 2010 19:36:29 +0100</updated>
                    <resolved>Thu, 13 May 2010 19:36:29 +0100</resolved>
                                                                    <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10245" author="andrew" created="Thu, 13 May 2010 19:36:29 +0100">&lt;p&gt;Resolved in OpenGamma/Fudge-Java repo&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-68] FudgeStreamReader should return a NULL on next() to indicate EOF at a message boundary</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-68</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Roll up issue for &lt;a href="http://jira.fudgemsg.org/browse/FRJ-66" title="FudgeDataInputStreamReader should return null when EOFException is thrown"&gt;&lt;del&gt;FRJ-66&lt;/del&gt;&lt;/a&gt; and a couple of related faults&lt;/p&gt;</description>
                <environment/>
            <key id="10244">FRJ-68</key>
            <summary>FudgeStreamReader should return a NULL on next() to indicate EOF at a message boundary</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Thu, 13 May 2010 14:56:06 +0100</created>
                <updated>Thu, 13 May 2010 19:36:40 +0100</updated>
                    <resolved>Thu, 13 May 2010 19:36:40 +0100</resolved>
                            <version>0.3</version>
                                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10246" author="andrew" created="Thu, 13 May 2010 19:36:40 +0100">&lt;p&gt;Resolved in OpenGamma/Fudge-Java repo&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
            <subtask id="10242">FRJ-66</subtask>
            <subtask id="10245">FRJ-69</subtask>
            <subtask id="10246">FRJ-70</subtask>
        </subtasks>
        </item>

<item>
            <title>[FRJ-67] FudgeDataOutputStreamWriter should flush when a message is sent</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-67</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now it doesn't, which leaves everything hanging in the buffer if a BufferedOutputStream is used.&lt;/p&gt;</description>
                <environment/>
            <key id="10243">FRJ-67</key>
            <summary>FudgeDataOutputStreamWriter should flush when a message is sent</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 12 May 2010 21:56:20 +0100</created>
                <updated>Thu, 13 May 2010 19:36:08 +0100</updated>
                    <resolved>Thu, 13 May 2010 19:36:07 +0100</resolved>
                            <version>0.3</version>
                                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10244" author="andrew" created="Thu, 13 May 2010 19:36:08 +0100">&lt;p&gt;Resolved in OpenGamma/Fudge-Java repo&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-66] FudgeDataInputStreamReader should return null when EOFException is thrown</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-66</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;We should have a special trap in consumeMessageEnvelope() where if we can't read the first unsigned byte (processing directives) and we get an EOFException, we should return a null message.&lt;/p&gt;

&lt;p&gt;Otherwise it's virtually impossible to detect what the state is if you're just reading messages from an unadorned socket that is in the process of getting closed underneath you.&lt;/p&gt;</description>
                <environment/>
            <key id="10242">FRJ-66</key>
            <summary>FudgeDataInputStreamReader should return null when EOFException is thrown</summary>
                <type id="5" iconUrl="http://jira.fudgemsg.org/images/icons/issue_subtask.gif">Sub-task</type>
                    <parent id="10244">FRJ-68</parent>
                        <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 12 May 2010 21:12:26 +0100</created>
                <updated>Thu, 13 May 2010 19:35:56 +0100</updated>
                    <resolved>Thu, 13 May 2010 19:35:56 +0100</resolved>
                            <version>0.3</version>
                                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10243" author="andrew" created="Thu, 13 May 2010 19:35:56 +0100">&lt;p&gt;Resolved in OpenGamma/Fudge-Java repo&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-65] Default FudgeMsgWriters don't work without modification</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-65</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;By default, if I have an OutputStream os, and I call fudgeContext.createMessageWriter(os), the resulting FudgeMsgWriter will throw an exception when writing a message as the default taxonomy has not been specified.&lt;/p&gt;

&lt;p&gt;By default I would assume that a message writer would be taxonomy-free.&lt;/p&gt;</description>
                <environment/>
            <key id="10241">FRJ-65</key>
            <summary>Default FudgeMsgWriters don't work without modification</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 12 May 2010 20:59:28 +0100</created>
                <updated>Thu, 13 May 2010 19:35:45 +0100</updated>
                    <resolved>Thu, 13 May 2010 19:35:44 +0100</resolved>
                            <version>0.3</version>
                                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10242" author="andrew" created="Thu, 13 May 2010 19:35:44 +0100">&lt;p&gt;Resolved in OpenGamma/Fudge-Java repo&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-64] Enums that don't implement a to/from fudgemsg can't be serialized</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-64</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;public enum OptionType {&lt;br/&gt;
  PUT, CALL&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;gets serialized to (XML output)&lt;/p&gt;

&lt;p&gt;&amp;lt;optionType&amp;gt;&amp;lt;declaringClass&amp;gt;&amp;lt;fudgeField0 ordinal="0"&amp;gt;java.lang.Class&amp;lt;/fudgeField0&amp;gt;&amp;lt;name&amp;gt;com.opengamma.financial.security.option.OptionType&amp;lt;/name&amp;gt;&amp;lt;/declaringClass&amp;gt;&amp;lt;fudgeField0 ordinal="0"&amp;gt;com.opengamma.financial.security.option.OptionType&amp;lt;/fudgeField0&amp;gt;&amp;lt;fudgeField0 ordinal="0"&amp;gt;java.lang.Enum&amp;lt;/fudgeField0&amp;gt;&amp;lt;/optionType&amp;gt;&lt;/p&gt;

&lt;p&gt;which doesn't contain the selected value&lt;/p&gt;</description>
                <environment/>
            <key id="10233">FRJ-64</key>
            <summary>Enums that don't implement a to/from fudgemsg can't be serialized</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Thu, 29 Apr 2010 17:46:56 +0100</created>
                <updated>Thu, 6 May 2010 13:30:06 +0100</updated>
                    <resolved>Thu, 6 May 2010 13:30:06 +0100</resolved>
                            <version>0.2</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10240" author="andrew" created="Thu, 6 May 2010 13:30:06 +0100">&lt;p&gt;Resolved in OpenGamma/Fudge-Java tree (with changes to OpenGamma/Fudge-Proto)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-63] FudgeFieldContainer and MutableFudgeFieldContainer methods don't allow null ordinals</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-63</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Can't easily filter fields with a null ordinal&lt;/p&gt;</description>
                <environment/>
            <key id="10232">FRJ-63</key>
            <summary>FudgeFieldContainer and MutableFudgeFieldContainer methods don't allow null ordinals</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Thu, 29 Apr 2010 10:42:52 +0100</created>
                <updated>Thu, 31 Mar 2011 18:03:02 +0100</updated>
                    <resolved>Thu, 31 Mar 2011 18:03:02 +0100</resolved>
                            <version>0.1</version>
                                <fixVersion>0.4</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10232" author="kirk" created="Thu, 29 Apr 2010 11:20:05 +0100">&lt;p&gt;Ergh, ugh. No, not if it's an either-or.&lt;/p&gt;

&lt;p&gt;I started out by having ordinals be a Short, but there's no way to specify a short literal in Java, which is why I made it (like many of the other sub-32 bit fields in a Fudge encoding) take an int and have explicit bounds checking.&lt;/p&gt;

&lt;p&gt;You just need to make sure that whatever you do here supports int literals easily.&lt;/p&gt;</comment>
                    <comment id="10233" author="andrew" created="Thu, 29 Apr 2010 11:43:03 +0100">&lt;p&gt;(Summary changed from suggesting method signatures be changed to Shorts)&lt;/p&gt;

&lt;p&gt;I agree the shorts are inconvenient. There is a mismatch in various bits of the API. Lets change everything to ints and Integers on the public APIs (depending on whether a null is a legal/appropriate value) with range checking on input parameters. Keep shorts internally where space considerations may come into play.&lt;/p&gt;</comment>
                    <comment id="10333" author="stephen" created="Thu, 31 Mar 2011 18:03:02 +0100">&lt;p&gt;API now handles search for null ordinals. API also changed to use Integer everywhere rather than Short.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-62] FudgeMsg implementation of getXXX methods returns null when duplicate fields present</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-62</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Only getString, getBoolean and getMessage return the first value of correct type when there are preceding fields of different types.&lt;/p&gt;</description>
                <environment/>
            <key id="10231">FRJ-62</key>
            <summary>FudgeMsg implementation of getXXX methods returns null when duplicate fields present</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Thu, 29 Apr 2010 10:33:59 +0100</created>
                <updated>Thu, 29 Apr 2010 13:03:37 +0100</updated>
                    <resolved>Thu, 29 Apr 2010 13:03:36 +0100</resolved>
                            <version>0.1</version>
                                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10234" author="andrew" created="Thu, 29 Apr 2010 13:03:36 +0100">&lt;p&gt;Methods will now find the first exact matching type, then one that can be applied to the dictionary's type converter.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-61] FudgeFieldContainer should have isEmpty() method</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-61</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;This would help me to get rid of frequent getAllFields().isEmpty() expressions when implementing normalization rules in the OG-LiveData project.&lt;/p&gt;</description>
                <environment/>
            <key id="10230">FRJ-61</key>
            <summary>FudgeFieldContainer should have isEmpty() method</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="http://jira.fudgemsg.org/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="pietari">Pietari Laurila</reporter>
                        <labels>
                    </labels>
                <created>Wed, 28 Apr 2010 16:16:01 +0100</created>
                <updated>Thu, 29 Apr 2010 14:10:22 +0100</updated>
                    <resolved>Thu, 29 Apr 2010 14:10:22 +0100</resolved>
                                                                    <due/>
                    <votes>1</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10230" author="kirk" created="Wed, 28 Apr 2010 16:21:33 +0100">&lt;p&gt;Definitely agree, and when we have other implementations of FudgeFieldContainer this is a very easy win rather than packaging up all fields in a collection to check size.&lt;/p&gt;</comment>
                    <comment id="10231" author="andrew" created="Wed, 28 Apr 2010 17:22:41 +0100">&lt;p&gt;Good point, although testing .getNumFields () == 0 might be a simpler intermediate solution than requesting the collection.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-60] MutableFudgeFieldContainer should have remove() and removeAll() methods</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-60</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;This is needed to implement a message normalization pipeline. A step in the pipeline might rename a field, or filter the list of fields to a subset of the original.&lt;/p&gt;</description>
                <environment/>
            <key id="10227">FRJ-60</key>
            <summary>MutableFudgeFieldContainer should have remove() and removeAll() methods</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="pietari">Pietari Laurila</reporter>
                        <labels>
                    </labels>
                <created>Tue, 30 Mar 2010 15:16:46 +0100</created>
                <updated>Tue, 6 Apr 2010 17:48:25 +0100</updated>
                    <resolved>Tue, 6 Apr 2010 17:15:51 +0100</resolved>
                                                                    <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10226" author="andrew" created="Tue, 6 Apr 2010 17:15:51 +0100">&lt;p&gt;'remove' methods are now in MutableFudgeFieldContainer, plus a 'clear' (for consistency with the naming in Java collections). The iterator returned by a Mutable container will also support the remove operation.&lt;/p&gt;</comment>
                    <comment id="10227" author="pietari" created="Tue, 6 Apr 2010 17:48:25 +0100">&lt;p&gt;Great news. Many thanks!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-59] FudgeFieldContainer should have methods hasField(String name) and hasField(int ordinal)</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-59</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;At the moment, you need to call getValue(String name) and check for null, which is more cumbersome.&lt;/p&gt;</description>
                <environment/>
            <key id="10224">FRJ-59</key>
            <summary>FudgeFieldContainer should have methods hasField(String name) and hasField(int ordinal)</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="pietari">Pietari Laurila</reporter>
                        <labels>
                    </labels>
                <created>Fri, 26 Mar 2010 12:16:20 +0000</created>
                <updated>Tue, 15 Jun 2010 22:58:13 +0100</updated>
                    <resolved>Tue, 15 Jun 2010 22:58:13 +0100</resolved>
                                            <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10255" author="andrew" created="Tue, 15 Jun 2010 01:20:23 +0100">&lt;p&gt;Raised priority in response to &lt;a href="http://jira.fudgemsg.org/browse/FRJ-78" title="Add a .containsField(String) method on FudgeFieldContainer"&gt;&lt;del&gt;FRJ-78&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="10256" author="kirk" created="Tue, 15 Jun 2010 22:58:13 +0100">&lt;p&gt;FudgeFieldContainer.hasField() written for int and String versions, added to FudgeMsgBase, tested, and pushed to OpenGamma/Fudge-Java repository.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10225">FRN-82</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-58] Serialization interop tests for Java / C#</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-58</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description/>
                <environment/>
            <key id="10191">FRJ-58</key>
            <summary>Serialization interop tests for Java / C#</summary>
                <type id="5" iconUrl="http://jira.fudgemsg.org/images/icons/issue_subtask.gif">Sub-task</type>
                    <parent id="10187">FRJ-55</parent>
                        <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Mar 2010 19:03:17 +0000</created>
                <updated>Fri, 5 Mar 2010 19:03:17 +0000</updated>
                                                                    <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-57] Implement revised serialisation contexts</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-57</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;As per changes to the wiki&lt;/p&gt;</description>
                <environment/>
            <key id="10190">FRJ-57</key>
            <summary>Implement revised serialisation contexts</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Mar 2010 19:00:39 +0000</created>
                <updated>Sat, 6 Mar 2010 07:54:07 +0000</updated>
                                                                    <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                            <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10192">FRN-56</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                <outwardlinks description="requires">
                            <issuelink>
            <issuekey id="10188">FRJ-56</issuekey>
        </issuelink>
                    </outwardlinks>
                                                <inwardlinks description="is required by">
                            <issuelink>
            <issuekey id="10189">PRO-23</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-56] Update wiki page</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-56</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Update with changes discussed 04/03/10 (back references, object version, registration callback, etc)&lt;/p&gt;</description>
                <environment/>
            <key id="10188">FRJ-56</key>
            <summary>Update wiki page</summary>
                <type id="5" iconUrl="http://jira.fudgemsg.org/images/icons/issue_subtask.gif">Sub-task</type>
                    <parent id="10187">FRJ-55</parent>
                        <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Mar 2010 18:56:52 +0000</created>
                <updated>Fri, 5 Mar 2010 19:01:01 +0000</updated>
                                                                    <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                            <issuelinks>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                                <inwardlinks description="is required by">
                            <issuelink>
            <issuekey id="10190">FRJ-57</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-55] Serialization</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-55</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Roll up task for the other serialization bits and bobs&lt;/p&gt;</description>
                <environment/>
            <key id="10187">FRJ-55</key>
            <summary>Serialization</summary>
                <type id="3" iconUrl="http://jira.fudgemsg.org/images/icons/task.gif">Task</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Mar 2010 18:52:16 +0000</created>
                <updated>Fri, 5 Mar 2010 18:52:16 +0000</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
            <subtask id="10171">FRJ-43</subtask>
            <subtask id="10184">FRJ-52</subtask>
            <subtask id="10186">FRJ-54</subtask>
            <subtask id="10188">FRJ-56</subtask>
            <subtask id="10191">FRJ-58</subtask>
        </subtasks>
        </item>

<item>
            <title>[FRJ-54] Support rich constructor immutable objects</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-54</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;The reflection based builders rely on a bean approach with a no-arg constructor. The C# version can work with constructors that take parameters. Look into implementing something equivilant in the Java mapping tools.&lt;/p&gt;</description>
                <environment/>
            <key id="10186">FRJ-54</key>
            <summary>Support rich constructor immutable objects</summary>
                <type id="5" iconUrl="http://jira.fudgemsg.org/images/icons/issue_subtask.gif">Sub-task</type>
                    <parent id="10187">FRJ-55</parent>
                        <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Mar 2010 18:51:14 +0000</created>
                <updated>Sat, 6 Mar 2010 07:56:55 +0000</updated>
                                                                    <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                            <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10193">FRN-57</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-53] Publish 0.3 release page on Wiki</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-53</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;List the features that we agree are a requirement for a 0.3 release (collate the ones already knocking about in the Jira), define appropriate interop tests, and set out a more formal release strategy to get the codebases back in line.&lt;/p&gt;</description>
                <environment/>
            <key id="10185">FRJ-53</key>
            <summary>Publish 0.3 release page on Wiki</summary>
                <type id="3" iconUrl="http://jira.fudgemsg.org/images/icons/task.gif">Task</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Mar 2010 18:48:59 +0000</created>
                <updated>Mon, 14 Mar 2011 18:27:01 +0000</updated>
                                    <version>0.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10322" author="stephen" created="Mon, 14 Mar 2011 18:27:01 +0000">&lt;p&gt;C# and C are now behind Java&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-52] Name mapping strategy</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-52</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Add support for a global/default name mapping strategy (see the c# version), bound to the context or one of the serialization artifacts. Update serialisation framework on wiki with the agreed options.&lt;/p&gt;</description>
                <environment/>
            <key id="10184">FRJ-52</key>
            <summary>Name mapping strategy</summary>
                <type id="5" iconUrl="http://jira.fudgemsg.org/images/icons/issue_subtask.gif">Sub-task</type>
                    <parent id="10187">FRJ-55</parent>
                        <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Mar 2010 18:46:53 +0000</created>
                <updated>Fri, 5 Mar 2010 18:53:13 +0000</updated>
                                    <version>0.2</version>
                                                <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-51] Add thread safety comments in javadoc</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-51</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Include in the comment for each concrete class whether an instance is safe to share between threads or not. If it's an abstract class, include any notes relevant to the writer of a sub-class for them to determine their sub-classes thread safety.&lt;/p&gt;

&lt;p&gt;In the cases of non-shareable, explain why or give guidance on how to use it safely.&lt;/p&gt;</description>
                <environment/>
            <key id="10183">FRJ-51</key>
            <summary>Add thread safety comments in javadoc</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stephen">Stephen Colebourne</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Mar 2010 16:46:22 +0000</created>
                <updated>Mon, 14 Mar 2011 18:27:58 +0000</updated>
                    <resolved>Mon, 14 Mar 2011 18:27:58 +0000</resolved>
                                            <fixVersion>0.4</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10165" author="stephen" created="Fri, 5 Mar 2010 17:06:13 +0000">&lt;p&gt;For example, from JSR-310.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;/li&gt;
	&lt;li&gt;LocalDate is immutable and thread-safe.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;/li&gt;
	&lt;li&gt;DateProvider makes no guarantees about the thread-safety or immutability&lt;/li&gt;
	&lt;li&gt;of implementations.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;/li&gt;
	&lt;li&gt;DateTimeFieldRule is an abstract class and must be implemented with care to&lt;/li&gt;
	&lt;li&gt;ensure other classes in the framework operate correctly.&lt;/li&gt;
	&lt;li&gt;All instantiable subclasses must be final, immutable and thread-safe and must&lt;/li&gt;
	&lt;li&gt;ensure serialization works correctly.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There are also the JCIP thread-safety annotations to consider.&lt;/p&gt;</comment>
                    <comment id="10323" author="stephen" created="Mon, 14 Mar 2011 18:27:58 +0000">&lt;p&gt;This is pretty much done now, any remaining items can be done individually.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-50] Remove TODO comments from code</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-50</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Any outstanding TODOs to be identified and either acted on, deleted, or filed in JIRA as a proper task.&lt;/p&gt;</description>
                <environment/>
            <key id="10180">FRJ-50</key>
            <summary>Remove TODO comments from code</summary>
                <type id="3" iconUrl="http://jira.fudgemsg.org/images/icons/task.gif">Task</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Mar 2010 15:21:05 +0000</created>
                <updated>Fri, 5 Mar 2010 15:21:05 +0000</updated>
                                    <version>0.2</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-49] Close any resolved issues that have been merged into master</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-49</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Any issues that are resolved but have been merged into the publicly visible master should be closed.&lt;/p&gt;</description>
                <environment/>
            <key id="10179">FRJ-49</key>
            <summary>Close any resolved issues that have been merged into master</summary>
                <type id="3" iconUrl="http://jira.fudgemsg.org/images/icons/task.gif">Task</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Mar 2010 15:19:49 +0000</created>
                <updated>Fri, 5 Mar 2010 15:19:49 +0000</updated>
                                    <version>0.2</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-48] Tweak FudgeTypeDictionary to use CopyOnWriteArrayList s</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-48</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Benchmark current performance.&lt;br/&gt;
Change the implementation to use the Java library tools.&lt;br/&gt;
Change it back if it's slower.&lt;/p&gt;</description>
                <environment/>
            <key id="10177">FRJ-48</key>
            <summary>Tweak FudgeTypeDictionary to use CopyOnWriteArrayList s</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Mar 2010 14:34:50 +0000</created>
                <updated>Fri, 5 Mar 2010 14:34:50 +0000</updated>
                                    <version>0.2</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-47] Decimal types</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-47</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;The floating point data types may not be suitable for financial calculations. Big nums and decimal floating point value could be written as strings. What about extending the type system with 32- and 64- bit decimals from IEE 754 for a future release.&lt;/p&gt;

&lt;p&gt;Does Java have a representation for these? I think .NET does.&lt;br/&gt;
Which of the two encodings should we select for the wire?&lt;/p&gt;

&lt;p&gt;If a future release does include these, should we also bundle in 128- bit types (ints, floats, decimals, arrays thereof)?&lt;/p&gt;</description>
                <environment/>
            <key id="10176">FRJ-47</key>
            <summary>Decimal types</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Mar 2010 13:50:15 +0000</created>
                <updated>Sat, 6 Mar 2010 07:58:28 +0000</updated>
                                                                    <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10161" author="kirk" created="Fri, 5 Mar 2010 13:53:40 +0000">&lt;p&gt;You're looking at BigDecimal in Java, which are NOT the same as C#'s "decimal" (which is actually a particularly horrible class quite frankly).&lt;/p&gt;

&lt;p&gt;We should have a system for encoding BigDecimal in binary. It shows up a lot in finance (though not in market data), and going to string is just a bad idea.&lt;/p&gt;</comment>
                    <comment id="10162" author="stephen" created="Fri, 5 Mar 2010 14:02:49 +0000">&lt;p&gt;With Joda-Money I store the unscaled amount and the scale using BigInteger.toByteArray() and the int scale.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10194">FRN-58</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-46] Check code base for any inappropriate use of exceptions</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-46</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Couple of tasks already identified - there may be other infringements.&lt;/p&gt;</description>
                <environment/>
            <key id="10175">FRJ-46</key>
            <summary>Check code base for any inappropriate use of exceptions</summary>
                <type id="5" iconUrl="http://jira.fudgemsg.org/images/icons/issue_subtask.gif">Sub-task</type>
                    <parent id="10173">FRJ-44</parent>
                        <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Mar 2010 11:36:56 +0000</created>
                <updated>Mon, 8 Mar 2010 14:17:27 +0000</updated>
                    <resolved>Mon, 8 Mar 2010 14:17:27 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.3</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-45] Revise javadoc and/or wiki document for exception conventions</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-45</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Clarify when to use/not use. Javadoc currently says to wrap everything EXCEPT IOException.&lt;/p&gt;</description>
                <environment/>
            <key id="10174">FRJ-45</key>
            <summary>Revise javadoc and/or wiki document for exception conventions</summary>
                <type id="5" iconUrl="http://jira.fudgemsg.org/images/icons/issue_subtask.gif">Sub-task</type>
                    <parent id="10173">FRJ-44</parent>
                        <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Mar 2010 11:36:12 +0000</created>
                <updated>Mon, 8 Mar 2010 12:52:49 +0000</updated>
                    <resolved>Mon, 8 Mar 2010 12:52:49 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10158" author="kirk" created="Fri, 5 Mar 2010 11:40:40 +0000">&lt;p&gt;Ahhhh, and now I remember why this was, and that was in part so that you could flow through things like EOFException and suchlike.&lt;/p&gt;

&lt;p&gt;The real problem here is the number of things that will throw IOException when you're not dealing with an actual file, which is a right shame.&lt;/p&gt;

&lt;p&gt;Now that I think about it, I think we just need to document that we'll wrap everything, and if there's an underlying channel that might be expected to throw IOException as a normal course of business, it should be checked for in the underlying on the FudgeRuntimeException.&lt;/p&gt;

&lt;p&gt;A thought: does it make sense to have a FudgeIOException which extends FudgeRuntimeException just to wrap IOException? That seems like a perfectly valid workaround for that one case.&lt;/p&gt;</comment>
                    <comment id="10159" author="andrew" created="Fri, 5 Mar 2010 12:00:25 +0000">&lt;p&gt;Subclassing for the I/O case is a very good idea - we'll go for that. Otherwise we'd risk people writing code like "if (e.getCause () instanceof IOException) ..." in catch clauses which is nasty!&lt;/p&gt;

&lt;p&gt;I've not seen any other exceptions that it would make sense to wrap, although possibly the XML and JSON parser exceptions when we read from those streams (not done yet).&lt;/p&gt;</comment>
                    <comment id="10160" author="stephen" created="Fri, 5 Mar 2010 12:02:57 +0000">&lt;p&gt;I have the following on CalendricalPrintException. Not totally sure I like the pattern, but it is obvious enough:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;/**
     * Checks &lt;span class="code-keyword"&gt;if&lt;/span&gt; the cause of &lt;span class="code-keyword"&gt;this&lt;/span&gt; exception was an IOException, and &lt;span class="code-keyword"&gt;if&lt;/span&gt; so
     * re-&lt;span class="code-keyword"&gt;throws&lt;/span&gt; it
     * &amp;lt;p&amp;gt;
     * This method is useful &lt;span class="code-keyword"&gt;if&lt;/span&gt; you call a printer with an open stream or
     * writer and want to ensure that IOExceptions are not lost.
     * &amp;lt;pre&amp;gt;
     * &lt;span class="code-keyword"&gt;try&lt;/span&gt; {
     *   printer.print(writer, dateTime);
     * } &lt;span class="code-keyword"&gt;catch&lt;/span&gt; (CalendricalFormatException ex) {
     *   ex.rethrowIOException();
     *   &lt;span class="code-comment"&gt;// &lt;span class="code-keyword"&gt;if&lt;/span&gt; code reaches here exception was caused by date-time issues
&lt;/span&gt;     * }
     * &amp;lt;/pre&amp;gt;
     * Note that calling &lt;span class="code-keyword"&gt;this&lt;/span&gt; method will re-&lt;span class="code-keyword"&gt;throw&lt;/span&gt; the original IOException,
     * causing &lt;span class="code-keyword"&gt;this&lt;/span&gt; CalendricalFormatException to be lost.
     *
     * @&lt;span class="code-keyword"&gt;throws&lt;/span&gt; IOException &lt;span class="code-keyword"&gt;if&lt;/span&gt; the cause of &lt;span class="code-keyword"&gt;this&lt;/span&gt; exception is an IOException
     */
    &lt;span class="code-keyword"&gt;public&lt;/span&gt; void rethrowIOException() &lt;span class="code-keyword"&gt;throws&lt;/span&gt; IOException {
        &lt;span class="code-keyword"&gt;if&lt;/span&gt; (getCause() &lt;span class="code-keyword"&gt;instanceof&lt;/span&gt; IOException) {
            &lt;span class="code-keyword"&gt;throw&lt;/span&gt; (IOException) getCause();
        }
    }&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="10198" author="andrew" created="Mon, 8 Mar 2010 12:52:49 +0000">&lt;p&gt;IOExceptions wrapped by a FudgeRuntimeIOException subclass&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-44] Tidy up use of FudgeRuntimeException</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-44</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Roll up issue for a couple of other tasks&lt;/p&gt;</description>
                <environment/>
            <key id="10173">FRJ-44</key>
            <summary>Tidy up use of FudgeRuntimeException</summary>
                <type id="3" iconUrl="http://jira.fudgemsg.org/images/icons/task.gif">Task</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Mar 2010 11:32:19 +0000</created>
                <updated>Mon, 8 Mar 2010 14:17:37 +0000</updated>
                    <resolved>Mon, 8 Mar 2010 14:17:37 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                            <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10195">FRN-59</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
            <subtask id="10156">FRJ-37</subtask>
            <subtask id="10157">FRJ-38</subtask>
            <subtask id="10174">FRJ-45</subtask>
            <subtask id="10175">FRJ-46</subtask>
        </subtasks>
        </item>

<item>
            <title>[FRJ-43] List &amp; map serialisation don't meet spec for null elements</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-43</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;The Java implementation is omitting null values from lists and arrays. The spec says to include "Indicator" placeholders. The deserialiser will be equally flawed.&lt;/p&gt;</description>
                <environment/>
            <key id="10171">FRJ-43</key>
            <summary>List &amp; map serialisation don't meet spec for null elements</summary>
                <type id="5" iconUrl="http://jira.fudgemsg.org/images/icons/issue_subtask.gif">Sub-task</type>
                    <parent id="10187">FRJ-55</parent>
                        <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="t0rx">Yan Tordoff</reporter>
                        <labels>
                    </labels>
                <created>Thu, 4 Mar 2010 16:50:56 +0000</created>
                <updated>Mon, 8 Mar 2010 14:00:13 +0000</updated>
                    <resolved>Mon, 8 Mar 2010 14:00:13 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.3</fixVersion>
                                <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-42] Allow system to run if MongoDB is not in the classpath</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-42</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Populate FudgeDefaultBuilderFactory from a .properties file, ignoring if the registered class is not available (i.e. MongoDB isn't available)&lt;/p&gt;</description>
                <environment/>
            <key id="10163">FRJ-42</key>
            <summary>Allow system to run if MongoDB is not in the classpath</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="pietari">Pietari Laurila</reporter>
                        <labels>
                    </labels>
                <created>Tue, 23 Feb 2010 16:08:43 +0000</created>
                <updated>Tue, 23 Feb 2010 17:00:47 +0000</updated>
                    <resolved>Tue, 23 Feb 2010 17:00:47 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.2</fixVersion>
                                <component>Mappings</component>
                <component>MongoDB</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-41] Read Fudge elements from an XML file</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-41</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;The core use case here is that I'd like to be able to use Proto Fudge generated objects with XML storage.&lt;/p&gt;

&lt;p&gt;For this, just like I'm currently able to write Fudge elements to XML, I should be able to read them as well.&lt;/p&gt;

&lt;p&gt;If type information is in the XML stream, that should be used. Otherwise, types should be auto-determined (and usually determined to be a String).&lt;/p&gt;

&lt;p&gt;This issue is for the first implementation. As it's used and enhancements are made, those will go into further issues.&lt;/p&gt;</description>
                <environment/>
            <key id="10160">FRJ-41</key>
            <summary>Read Fudge elements from an XML file</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Feb 2010 16:32:15 +0000</created>
                <updated>Wed, 17 Feb 2010 16:32:15 +0000</updated>
                                                                    <component>XML</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-40] Superior control for XML output</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-40</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Various small improvements to XML output:&lt;/p&gt;
&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;Allow for pretty-printing options&lt;/li&gt;
	&lt;li&gt;Option to not include the &amp;lt;fudgeEnvelope&amp;gt; wrapper&lt;/li&gt;
	&lt;li&gt;Option to rename the &amp;lt;fudgeEnvelope&amp;gt; wrapper (so I can rename it as "foo" if it's representing a "foo" object)&lt;/li&gt;
	&lt;li&gt;Option to omit type information&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment/>
            <key id="10159">FRJ-40</key>
            <summary>Superior control for XML output</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Feb 2010 16:07:52 +0000</created>
                <updated>Thu, 25 Feb 2010 13:30:53 +0000</updated>
                    <resolved>Thu, 25 Feb 2010 13:30:53 +0000</resolved>
                                            <fixVersion>0.3</fixVersion>
                                <component>XML</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10154" author="andrew" created="Wed, 24 Feb 2010 22:30:04 +0000">&lt;p&gt;Any pretty printing should be done by the XMLStreamWriter implementation. The JDK supplied ones don't have any ability to do this. Options:&lt;/p&gt;

&lt;p&gt;1) pick an existing library (e.g. javanet.staxutils) that does it and make Fudge dependent on in&lt;br/&gt;
2) create something very crude within the org.fudgemsg.xml package&lt;br/&gt;
3) not bother &amp;amp; let the user deal with it with their chosen package&lt;/p&gt;</comment>
                    <comment id="10155" author="kirk" created="Thu, 25 Feb 2010 13:15:07 +0000">&lt;p&gt;I think we go with #3, along with some type of documentation about potential projects and solutions to make it pretty-print better. I think probably it's because I'm most used to working with alternative implementations that allow formatting.&lt;/p&gt;

&lt;p&gt;Still would like the other options in there though.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                                <inwardlinks description="is required by">
                            <issuelink>
            <issuekey id="10037">FRJ-19</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-39] Don't base64 encode Strings in XML output</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-39</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now where we have strings we output them as base64 encoded text. As they're strings, and we're writing in a UTF-8 context, we should just be able to write the XML of the text as strings.&lt;/p&gt;</description>
                <environment/>
            <key id="10158">FRJ-39</key>
            <summary>Don't base64 encode Strings in XML output</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Feb 2010 16:06:09 +0000</created>
                <updated>Thu, 25 Feb 2010 13:35:07 +0000</updated>
                    <resolved>Thu, 25 Feb 2010 13:35:07 +0000</resolved>
                                            <fixVersion>0.2</fixVersion>
                                <component>XML</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                            <issuelinks>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                                <inwardlinks description="is required by">
                            <issuelink>
            <issuekey id="10037">FRJ-19</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-38] FudgeMsgWriter should wrap IOExceptions and rethrow</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-38</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;We don't like checked exceptions.&lt;/p&gt;</description>
                <environment/>
            <key id="10157">FRJ-38</key>
            <summary>FudgeMsgWriter should wrap IOExceptions and rethrow</summary>
                <type id="5" iconUrl="http://jira.fudgemsg.org/images/icons/issue_subtask.gif">Sub-task</type>
                    <parent id="10173">FRJ-44</parent>
                        <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Feb 2010 16:01:55 +0000</created>
                <updated>Mon, 8 Mar 2010 12:57:50 +0000</updated>
                    <resolved>Mon, 8 Mar 2010 12:57:50 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.3</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-37] FudgeXMLStreamWriter should wrap XMLStreamException in a FudgeRuntimeException</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-37</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now it just propagates the exception, but it should wrap and rethrow as the Fudge API explicitly doesn't like checked exceptions.&lt;/p&gt;</description>
                <environment/>
            <key id="10156">FRJ-37</key>
            <summary>FudgeXMLStreamWriter should wrap XMLStreamException in a FudgeRuntimeException</summary>
                <type id="5" iconUrl="http://jira.fudgemsg.org/images/icons/issue_subtask.gif">Sub-task</type>
                    <parent id="10173">FRJ-44</parent>
                        <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Feb 2010 15:59:56 +0000</created>
                <updated>Mon, 8 Mar 2010 13:03:07 +0000</updated>
                    <resolved>Mon, 8 Mar 2010 13:03:07 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.3</fixVersion>
                                <component>XML</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-36] Fast/easy method to create a FudgeMsgEnvelope from an Object</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-36</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;If I have an Object and I want to quickly go to a FudgeMsg or FudgeMsgEnvelope, I'd like a single-operation method on FudgeContext that looks like:&lt;/p&gt;

&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;FudgeMsgEnvelope toFudgeMsg(Object object)&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment/>
            <key id="10152">FRJ-36</key>
            <summary>Fast/easy method to create a FudgeMsgEnvelope from an Object</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="5" iconUrl="http://jira.fudgemsg.org/images/icons/priority_trivial.gif">Trivial</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Feb 2010 15:09:53 +0000</created>
                <updated>Fri, 18 Feb 2011 12:56:31 +0000</updated>
                    <resolved>Fri, 18 Feb 2011 12:56:31 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.3</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10314" author="stephen" created="Fri, 18 Feb 2011 12:56:31 +0000">&lt;p&gt;This was added a while back&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-35] Upgrade MongoDB integration library to 1.4</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-35</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;The current Mongo library in the fudgemsg.orgIvy repository is one that I built a while ago and created an ivy.xml file for.&lt;/p&gt;

&lt;p&gt;Since then I've not kept up to date with the official release versions of the MongoDB client library; we should upgrade this to the most recent stable version.&lt;/p&gt;

&lt;p&gt;As well, when this is done, should check to make sure that we're doing recommended usage.&lt;/p&gt;</description>
                <environment/>
            <key id="10140">FRJ-35</key>
            <summary>Upgrade MongoDB integration library to 1.4</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Mon, 15 Feb 2010 17:11:57 +0000</created>
                <updated>Tue, 25 May 2010 00:40:33 +0100</updated>
                    <resolved>Tue, 25 May 2010 00:40:33 +0100</resolved>
                            <version>0.1</version>
                <version>0.2</version>
                                <fixVersion>0.3</fixVersion>
                                <component>MongoDB</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10249" author="kirk" created="Tue, 25 May 2010 00:40:33 +0100">&lt;p&gt;New library put into dist.fudgemsg.org Ivy repository and Fudge-Java's ivy.xml upgraded to require 1.4.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-34] Merge the OpenGamma branch back into FudgeMsg</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-34</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Custom builders and other logics being trialled by OpenGamma developers. If API is acceptable, merge all back into the public branch.&lt;/p&gt;</description>
                <environment/>
            <key id="10120">FRJ-34</key>
            <summary>Merge the OpenGamma branch back into FudgeMsg</summary>
                <type id="3" iconUrl="http://jira.fudgemsg.org/images/icons/task.gif">Task</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Wed, 3 Feb 2010 17:01:39 +0000</created>
                <updated>Thu, 11 Feb 2010 19:02:34 +0000</updated>
                    <resolved>Thu, 11 Feb 2010 19:02:34 +0000</resolved>
                                            <fixVersion>0.2</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10124" author="andrew" created="Thu, 11 Feb 2010 19:02:34 +0000">&lt;p&gt;FudgeMsg/Fudge-Java contains the proposed 0.2 build&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10083">FRJ-32</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                                <inwardlinks description="is required by">
                            <issuelink>
            <issuekey id="10020">FRJ-12</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="10034">FRJ-17</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="10051">FRJ-28</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="10052">FRJ-29</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="10041">FRJ-23</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="10030">FRJ-13</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="10042">FRJ-24</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="10043">FRJ-25</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="10110">FRJ-33</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-33] Reimplement the reader/writer pools in FudgeContext</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-33</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Pools of reader/writer objects in FudgeContext are not managed efficiently, e.g. there is no upper size limit if a large number of objects are requested and then released. This could be either be implemented more efficiently using commons-pool or a cut down logic that just meets the requirements of Fudge without introducing another dependancy.&lt;/p&gt;</description>
                <environment/>
            <key id="10110">FRJ-33</key>
            <summary>Reimplement the reader/writer pools in FudgeContext</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="4" iconUrl="http://jira.fudgemsg.org/images/icons/priority_minor.gif">Minor</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="andrew">Andrew Griffin</reporter>
                        <labels>
                    </labels>
                <created>Tue, 2 Feb 2010 15:15:23 +0000</created>
                <updated>Thu, 11 Feb 2010 19:05:26 +0000</updated>
                    <resolved>Thu, 11 Feb 2010 19:05:26 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.2</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="10106" author="t0rx" created="Tue, 2 Feb 2010 15:42:35 +0000">&lt;p&gt;What's the need for maintaining pools in the context rather than just constructing?&lt;/p&gt;</comment>
                    <comment id="10107" author="andrew" created="Tue, 2 Feb 2010 16:41:59 +0000">&lt;p&gt;When Kirk did some original tests, the overhead of creating the reader/writer in tight loops was impacting on performance so once created the context was used to pool them. I'll set up a unit test within the Java project to verify this is still the case (and how severe any impact may be) that we can use as a benchmark for any alternative.&lt;/p&gt;</comment>
                    <comment id="10108" author="andrew" created="Tue, 2 Feb 2010 18:34:18 +0000">&lt;p&gt;For 1000000 cycles (pooled)&lt;br/&gt;
	Fudge names only 4301ms (232504.06882120436 cycles/sec)&lt;br/&gt;
	Fudge ordinals only 3833ms (260892.25150013043 cycles/sec)&lt;br/&gt;
	Fudge names and ordinals 4504ms (222024.8667850799 cycles/sec)&lt;br/&gt;
	Fudge objects no taxonomy 5456ms (183284.45747800588 cycles/sec)&lt;br/&gt;
For 1000000 cycles (non-pooled)&lt;br/&gt;
	Fudge names only 2707ms (369412.6339120798 cycles/sec)&lt;br/&gt;
	Fudge ordinals only 1987ms (503271.2632108706 cycles/sec)&lt;br/&gt;
	Fudge names and ordinals 2819ms (354735.721887194 cycles/sec)&lt;br/&gt;
	Fudge objects no taxonomy 3203ms (312207.3056509522 cycles/sec)&lt;/p&gt;

&lt;p&gt;Hmm. A) pooling the objects isn't such a good idea, B) I've done something daft and broken the FudgeContext, or C) my test script is flawed.&lt;/p&gt;</comment>
                    <comment id="10109" author="kirk" created="Wed, 3 Feb 2010 09:51:43 +0000">&lt;p&gt;No, it's also possible that my original tests were just horribly broken because it was so early stage.&lt;/p&gt;

&lt;p&gt;If it's not providing any benefit (which it might not as they're so small), then just get rid of the code entirely.&lt;/p&gt;</comment>
                    <comment id="10110" author="andrew" created="Wed, 3 Feb 2010 13:33:34 +0000">&lt;p&gt;Some additional tests confirmed that the pooling logic is correct (no redundant allocations) and the performance is slightly slower than without.&lt;/p&gt;

&lt;p&gt;The pooling will go, but methods to create e.g. object readers directly from an inputstream will be kept in the context for convenience.&lt;/p&gt;</comment>
                    <comment id="10111" author="andrew" created="Wed, 3 Feb 2010 17:02:57 +0000">&lt;p&gt;Pools removed from OpenGamma master branch.&lt;/p&gt;</comment>
                    <comment id="10133" author="andrew" created="Thu, 11 Feb 2010 19:05:26 +0000">&lt;p&gt;Available in FudgeMsg/Fudge-Java&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                <outwardlinks description="requires">
                            <issuelink>
            <issuekey id="10120">FRJ-34</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-32] Better solution for reading multiple messages from an InputStream</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-32</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now with the streaming system, you can consume messages from an InputStream one-by-one, since we have the size offset in the Message Envelope.&lt;/p&gt;

&lt;p&gt;However, when you reach the end of a stream, we'll actually throw a FudgeRuntimeException wrapping an IOException because you've reached the end of the stream. This isn't particularly good.&lt;/p&gt;

&lt;p&gt;The only reason this wasn't fixed already was that the Java system for detecting EOF is particularly poor and so it wasn't a trivial fix.&lt;/p&gt;</description>
                <environment/>
            <key id="10083">FRJ-32</key>
            <summary>Better solution for reading multiple messages from an InputStream</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Sat, 2 Jan 2010 15:38:39 +0000</created>
                <updated>Thu, 11 Feb 2010 19:02:57 +0000</updated>
                    <resolved>Thu, 11 Feb 2010 19:02:57 +0000</resolved>
                            <version>0.1</version>
                <version>0.2</version>
                                <fixVersion>0.2</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10091" author="andrew" created="Tue, 26 Jan 2010 16:11:50 +0000">&lt;p&gt;Fixed in OpenGamma/Fudge-Java, fudgeproto branch. If the DataInput is backed by an InputStream the underlying is used to determine if another message is available. Otherwise the EOFException should propogate outwards at the next call to consumeMessageEnvelope.&lt;/p&gt;</comment>
                    <comment id="10112" author="andrew" created="Wed, 3 Feb 2010 17:04:22 +0000">&lt;p&gt;In the OpenGamma master branch.&lt;/p&gt;</comment>
                    <comment id="10125" author="andrew" created="Thu, 11 Feb 2010 19:02:57 +0000">&lt;p&gt;Available in FudgeMsg/Fudge-Java&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                <outwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10120">FRJ-34</issuekey>
        </issuelink>
                    </outwardlinks>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10081">FRN-26</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-31] Don't use built-in DataOutputStream.write(byte[]) method</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-31</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Fudge relies quite a bit on DataOutputStream (or, rather, DataOutput, but we virtually always wrap an OutputStream in a DataOutputStream). However, for the underlying semantics of FilterOutputStream, it will make a method invocation on write(byte) for each byte in a byte array that we pass to write(byte[]).&lt;/p&gt;

&lt;p&gt;As Fudge encoding relies on writing byte arrays a lot, this is horribly inefficient.&lt;/p&gt;

&lt;p&gt;One option is to have a FudgeDataOutputStream which subclasses DataOutputStream and overrides .write(byte[], int, int) to not write individual bytes, but there may be other options as well.&lt;/p&gt;</description>
                <environment/>
            <key id="10064">FRJ-31</key>
            <summary>Don't use built-in DataOutputStream.write(byte[]) method</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="http://jira.fudgemsg.org/images/icons/status_closed.gif">Closed</status>
                    <resolution id="5">Cannot Reproduce</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Dec 2009 13:43:10 +0000</created>
                <updated>Mon, 21 Dec 2009 18:45:00 +0000</updated>
                    <resolved>Mon, 21 Dec 2009 18:45:00 +0000</resolved>
                            <version>0.1</version>
                                <fixVersion>0.2</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10045" author="kirk" created="Mon, 21 Dec 2009 18:45:00 +0000">&lt;p&gt;Turns out this was based on a misreading of the interaction between FilterOutputStream and DataOutputStream. The optimized form is actually in use, and confirmed through stepping through the code.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-30] Object serialization should support sets</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-30</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;This should be done the same way as for lists&lt;/p&gt;</description>
                <environment/>
            <key id="10053">FRJ-30</key>
            <summary>Object serialization should support sets</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Fri, 20 Nov 2009 12:48:19 +0000</created>
                <updated>Fri, 20 Nov 2009 12:55:17 +0000</updated>
                    <resolved>Fri, 20 Nov 2009 12:55:17 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.2</fixVersion>
                                <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10038" author="kirk" created="Fri, 20 Nov 2009 12:55:17 +0000">&lt;p&gt;Pushed upstream to master.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-29] Object serialization should support specifying the class of object</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-29</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now we rely on the objects being known at serialization/deserialization time. This, however, doesn't work for cases where you have an abstract collection, or are specifying an object reference based on an interface or a base class. It also doesn't work for situations where the object might be one of several types for a given transport stream.&lt;/p&gt;

&lt;p&gt;Therefore, we should encode a name for the object, which can then be used to determine the precise class to be deserialized.&lt;/p&gt;</description>
                <environment/>
            <key id="10052">FRJ-29</key>
            <summary>Object serialization should support specifying the class of object</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Thu, 19 Nov 2009 10:19:31 +0000</created>
                <updated>Thu, 11 Feb 2010 19:03:16 +0000</updated>
                    <resolved>Thu, 11 Feb 2010 19:03:16 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.2</fixVersion>
                                <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10092" author="andrew" created="Tue, 26 Jan 2010 16:16:53 +0000">&lt;p&gt;Fixed in OpenGamma/Fudge-Java fudgeproto branch.&lt;/p&gt;

&lt;p&gt;Field ordinal 0 is checked for class names that can be used during deserialisation. The ReflectionMessageBuilder puts this into messages. Any custom builders must add it themselves if the class name is not asserted at the receiving end.&lt;/p&gt;</comment>
                    <comment id="10113" author="andrew" created="Wed, 3 Feb 2010 17:04:49 +0000">&lt;p&gt;In the OpenGamma master branch&lt;/p&gt;</comment>
                    <comment id="10126" author="andrew" created="Thu, 11 Feb 2010 19:03:16 +0000">&lt;p&gt;Available in FudgeMsg/Fudge-Java&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                <outwardlinks description="requires">
                            <issuelink>
            <issuekey id="10120">FRJ-34</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-28] Object building must support custom builders</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-28</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now we rely on having default constructors and field setting. However, for constant objects, where certain (or all) fields must be specified in the constructor, we just don't support the system at all.&lt;/p&gt;

&lt;p&gt;In addition, for singletons, we don't support loading from a static collection.&lt;/p&gt;

&lt;p&gt;Therefore, we need to be able to have custom builders which will return the object specified in the mapping.&lt;/p&gt;

&lt;p&gt;The way I'd see this working is:&lt;/p&gt;
&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;We have an interface that allows returning an object instance from a FudgeFieldContainer (e.g. FudgeObjectBuilder&amp;lt;MyClass&amp;gt;)&lt;/li&gt;
	&lt;li&gt;We have two different interfaces that allow encoding an object instance in Fudge encoding:&lt;/li&gt;
	&lt;li&gt;FudgeObjectMessageEncoder (which will encode a class instance as a whole FudgeMsg)&lt;/li&gt;
	&lt;li&gt;FudgeObjectFieldEncoder (which will encode a class as fields added to a provided FudgeMsg)&lt;/li&gt;
	&lt;li&gt;(Note that it might be possible to collapse these to one interface)&lt;/li&gt;
	&lt;li&gt;There would be a repository of these instances hooked up to a FudgeContext&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Then we can do all types of dynamic bits in terms of selecting the encoder/decoder from the FudgeContext based on parameters in the message, and do automatic encoding/decoding a la JAXB.&lt;/p&gt;</description>
                <environment/>
            <key id="10051">FRJ-28</key>
            <summary>Object building must support custom builders</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Thu, 19 Nov 2009 10:17:15 +0000</created>
                <updated>Thu, 11 Feb 2010 19:03:47 +0000</updated>
                    <resolved>Thu, 11 Feb 2010 19:03:47 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.2</fixVersion>
                                <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10090" author="andrew" created="Tue, 26 Jan 2010 11:35:49 +0000">&lt;p&gt;Draft implmenetation available in the fudgeproto branch of OpenGamma/Fudge-Java. The FudgeObjectDictionary can be used to register custom message and object builders, or deliver default builders which use reflection. Will push to FudgeMsg/Fudge-Java after testing use within the other OpenGamma projects.&lt;/p&gt;</comment>
                    <comment id="10114" author="andrew" created="Wed, 3 Feb 2010 17:05:36 +0000">&lt;p&gt;In the OpenGamma master branch for evaluation by OpenGamma developers&lt;/p&gt;</comment>
                    <comment id="10127" author="andrew" created="Thu, 11 Feb 2010 19:03:47 +0000">&lt;p&gt;Available in FudgeMsg/Fudge-Java&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                <outwardlinks description="requires">
                            <issuelink>
            <issuekey id="10120">FRJ-34</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-27] Object serialization should disregard static and transient fields</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-27</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;We're attempting to serialize and deserialize them, regardless of whether they're static/transient or not.&lt;/p&gt;</description>
                <environment/>
            <key id="10050">FRJ-27</key>
            <summary>Object serialization should disregard static and transient fields</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="yomi">Abayomi Ayodele</reporter>
                        <labels>
                    </labels>
                <created>Wed, 18 Nov 2009 18:44:27 +0000</created>
                <updated>Thu, 19 Nov 2009 10:23:58 +0000</updated>
                    <resolved>Thu, 19 Nov 2009 10:23:58 +0000</resolved>
                            <version>0.2</version>
                                <fixVersion>0.2</fixVersion>
                                <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10032" author="kirk" created="Thu, 19 Nov 2009 09:37:40 +0000">&lt;p&gt;This is now ready in the OpenGamma/Fudge-Java.git branch.&lt;/p&gt;</comment>
                    <comment id="10037" author="kirk" created="Thu, 19 Nov 2009 10:23:58 +0000">&lt;p&gt;Pushed upstream.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-26] No Interop Test that covers 64-bit integers</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-26</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Apparently the StandardFudgeMessages block that's used for interop testing doesn't actually include a message that includes a 64-bit integer, because all the values are downscaled to INT32. We need a separate interop test (so that we don't mess with any existing ones) that includes actual positive and negative 64-bit integers.&lt;/p&gt;</description>
                <environment/>
            <key id="10045">FRJ-26</key>
            <summary>No Interop Test that covers 64-bit integers</summary>
                <type id="1" iconUrl="http://jira.fudgemsg.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="http://jira.fudgemsg.org/images/icons/status_closed.gif">Closed</status>
                    <resolution id="5">Cannot Reproduce</resolution>
                                <assignee username="jim">Jim Moores</assignee>
                                <reporter username="vrai">Vrai Stacey</reporter>
                        <labels>
                    </labels>
                <created>Mon, 16 Nov 2009 13:36:32 +0000</created>
                <updated>Wed, 18 Nov 2009 13:00:24 +0000</updated>
                    <resolved>Wed, 18 Nov 2009 13:00:23 +0000</resolved>
                            <version>0.1</version>
                                <fixVersion>0.1</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10030" author="jim" created="Wed, 18 Nov 2009 13:00:23 +0000">&lt;p&gt;I can't see what the problem is here as &lt;/p&gt;

&lt;p&gt;    long longValue = ((long)Integer.MAX_VALUE) + 5;&lt;br/&gt;
    msg.add("long", longValue);&lt;br/&gt;
    msg.add("Long", new Long(longValue));&lt;/p&gt;

&lt;p&gt;in StandardMessages.java would appear to be correct.  &lt;/p&gt;

&lt;p&gt;When in the debugger, longValue = 2147483652, which is &amp;gt; 2147483647 (Integer.MAX_VALUE), so should be 64-bit. &lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10046">FRN-12</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-25] Support Fudge field name overrides for Object field mappings</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-25</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Should be done using an annotation.&lt;/p&gt;</description>
                <environment/>
            <key id="10043">FRJ-25</key>
            <summary>Support Fudge field name overrides for Object field mappings</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Thu, 12 Nov 2009 17:50:50 +0000</created>
                <updated>Thu, 11 Feb 2010 19:04:36 +0000</updated>
                    <resolved>Thu, 11 Feb 2010 19:04:36 +0000</resolved>
                                            <fixVersion>0.2</fixVersion>
                                <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10018" author="t0rx" created="Thu, 12 Nov 2009 18:54:18 +0000">&lt;p&gt;Saw some discussion somewhere on a similar subject, where they supported annotations on the class as well as directly on the field, as this brings it all into one place.  May be worth when we do the .net equivalent to provide a class-level "convention" attribute that says all field names should be lower-case etc.&lt;/p&gt;</comment>
                    <comment id="10019" author="kirk" created="Thu, 12 Nov 2009 18:57:14 +0000">&lt;p&gt;Agreed. For example, right now I'm just auto-trimming leading underscores if you've got them, but we'll want to have a number of "standard" rules that you can apply along with explicit mapping rules on the fields.&lt;/p&gt;

&lt;p&gt;And you should be able to apply a rule for a particular field/property on the class so that one rule can hold for a field and a bean property.&lt;/p&gt;</comment>
                    <comment id="10095" author="andrew" created="Fri, 29 Jan 2010 13:48:22 +0000">&lt;p&gt;The reflection based builders (extending org.fudgemsg.mapping.ReflectionBuilderBase) are working from getXxx and setXxx method names at the moment to work around visibility restrictions on the attributes. The get/set prefix is dropped and the first character lowercased to construct a field name for the message.&lt;/p&gt;

&lt;p&gt;Implement as an annotation on the class that references a name mapping instance. The .mapping package can supply the obvious choices of preserve, lowercase first, lowercase all, uppercase all. A user supplied custom class is then also possible. This can override the default lowercase first if specified.&lt;/p&gt;

&lt;p&gt;An annotation could be put on the accessor/mutator methods to override the class setting to indicate the field name for the message.&lt;/p&gt;</comment>
                    <comment id="10097" author="kirk" created="Fri, 29 Jan 2010 16:32:03 +0000">&lt;p&gt;You should be using BeanUtils rather than doing the property mangling work itself; it does all that for you in a consistent way.&lt;/p&gt;</comment>
                    <comment id="10115" author="andrew" created="Wed, 3 Feb 2010 17:08:18 +0000">&lt;p&gt;In the OpenGamma master branch.&lt;/p&gt;

&lt;p&gt;Reflection builders are replaced by a BeanUtils based one. The original code is still in the package (in case someone needs a build that has no external dependancies, but should probably be removed).&lt;/p&gt;

&lt;p&gt;Annotations can be used to specify name overrides&lt;/p&gt;</comment>
                    <comment id="10130" author="andrew" created="Thu, 11 Feb 2010 19:04:36 +0000">&lt;p&gt;Available in FudgeMsg/Fudge-Java&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                <outwardlinks description="requires">
                            <issuelink>
            <issuekey id="10120">FRJ-34</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-24] Support transience for Object field mappings</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-24</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Should be done either by checking the transient keyword, or by attribute checking.&lt;/p&gt;</description>
                <environment/>
            <key id="10042">FRJ-24</key>
            <summary>Support transience for Object field mappings</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Thu, 12 Nov 2009 17:50:19 +0000</created>
                <updated>Thu, 11 Feb 2010 19:04:54 +0000</updated>
                    <resolved>Thu, 11 Feb 2010 19:04:54 +0000</resolved>
                                            <fixVersion>0.2</fixVersion>
                                <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10096" author="andrew" created="Fri, 29 Jan 2010 13:56:04 +0000">&lt;p&gt;Could we do this by annotation on the get/set method instead of looking at the attribute as that better fits with the reflection model we're using. It could be combined with the annotation used for a custom field name/mapping to indicate that it doesn't correspond to any field within a Fudge message.&lt;/p&gt;</comment>
                    <comment id="10098" author="kirk" created="Fri, 29 Jan 2010 16:32:42 +0000">&lt;p&gt;Yep. I'm sure there's already somebody who's using an @Transient annotation, so we can either leverage whoever's doing that or have our own @FudgeTransient annotation.&lt;/p&gt;</comment>
                    <comment id="10104" author="andrew" created="Mon, 1 Feb 2010 14:34:41 +0000">&lt;p&gt;Done (OpenGamma/FudgeMsg fudgeproto). There is a @Transient in the Java Persistence Framework, but that's only standard with a J2EE distribution. If JPF is available, it can be used. Otherwise there is a @FudgeTransient that can be used until J2SE versions of Java have caught up.&lt;/p&gt;</comment>
                    <comment id="10116" author="andrew" created="Wed, 3 Feb 2010 17:08:40 +0000">&lt;p&gt;In the OpenGamma master branch&lt;/p&gt;</comment>
                    <comment id="10131" author="andrew" created="Thu, 11 Feb 2010 19:04:54 +0000">&lt;p&gt;Available in FudgeMsg/Fudge-Java&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                <outwardlinks description="requires">
                            <issuelink>
            <issuekey id="10120">FRJ-34</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-23] Move size calculation logic to a dedicated class/routine</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-23</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now it's scattered throughout the FudgeMsg and FudgeMsgField logic.&lt;/p&gt;

&lt;p&gt;However, to better support streaming objects/beans directly to a FudgeStreamWriter, we need to be able to compute what the size of a stream is going to be, without manifesting a FudgeMsg for that particular object.&lt;/p&gt;</description>
                <environment/>
            <key id="10041">FRJ-23</key>
            <summary>Move size calculation logic to a dedicated class/routine</summary>
                <type id="3" iconUrl="http://jira.fudgemsg.org/images/icons/task.gif">Task</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Thu, 12 Nov 2009 13:47:41 +0000</created>
                <updated>Thu, 11 Feb 2010 19:04:20 +0000</updated>
                    <resolved>Thu, 11 Feb 2010 19:04:20 +0000</resolved>
                                            <fixVersion>0.2</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10094" author="andrew" created="Tue, 26 Jan 2010 18:25:36 +0000">&lt;p&gt;Completed in OpenGamma/Fudge-Java fudgeproto branch.&lt;/p&gt;

&lt;p&gt;The FudgeSize branch has static methods for calculating the message sizes. It doesn't have the taxonomy caching (was this a major performance tune?). The FudgeEncodingObject class has been removed.&lt;/p&gt;</comment>
                    <comment id="10117" author="andrew" created="Wed, 3 Feb 2010 17:08:59 +0000">&lt;p&gt;In the OpenGamma master branch&lt;/p&gt;</comment>
                    <comment id="10129" author="andrew" created="Thu, 11 Feb 2010 19:04:20 +0000">&lt;p&gt;Available in FudgeMsg/Fudge-Java&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                <outwardlinks description="requires">
                            <issuelink>
            <issuekey id="10120">FRJ-34</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-22] Automatically map Object fields to Fudge Messages</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-22</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;This is similar to JavaBeans, only rather than working with properties, we'll be working with raw fields themselves.&lt;/p&gt;</description>
                <environment/>
            <key id="10040">FRJ-22</key>
            <summary>Automatically map Object fields to Fudge Messages</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Thu, 12 Nov 2009 12:26:15 +0000</created>
                <updated>Thu, 19 Nov 2009 10:23:20 +0000</updated>
                    <resolved>Thu, 19 Nov 2009 10:23:20 +0000</resolved>
                                            <fixVersion>0.2</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10017" author="kirk" created="Thu, 12 Nov 2009 17:18:40 +0000">&lt;p&gt;This is also ready to go for the first generation in OpenGamma/Fudge-Java.git&lt;/p&gt;</comment>
                    <comment id="10036" author="kirk" created="Thu, 19 Nov 2009 10:23:20 +0000">&lt;p&gt;Pushed upstream.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                <outwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10020">FRJ-12</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-21] Must have test that writes out messages to byte arrays, and compares them against standards</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-21</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;This allows us to test whether we're still producing the same bytes for the same messages.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://jira.fudgemsg.org/browse/FRJ-20" title="Must have test that reads previously serialized messages"&gt;&lt;del&gt;FRJ-20&lt;/del&gt;&lt;/a&gt; allows us to test we can still parse with no problems, but this is the one for writing.&lt;/p&gt;</description>
                <environment/>
            <key id="10039">FRJ-21</key>
            <summary>Must have test that writes out messages to byte arrays, and compares them against standards</summary>
                <type id="3" iconUrl="http://jira.fudgemsg.org/images/icons/task.gif">Task</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Thu, 12 Nov 2009 12:06:22 +0000</created>
                <updated>Thu, 19 Nov 2009 10:22:57 +0000</updated>
                    <resolved>Thu, 19 Nov 2009 10:22:57 +0000</resolved>
                                            <fixVersion>0.2</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10015" author="kirk" created="Thu, 12 Nov 2009 12:12:44 +0000">&lt;p&gt;This is pushed to OpenGamma/Fudge-Java.&lt;/p&gt;</comment>
                    <comment id="10035" author="kirk" created="Thu, 19 Nov 2009 10:22:57 +0000">&lt;p&gt;Pushed upstream.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-20] Must have test that reads previously serialized messages</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-20</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now we write out and make sure that we can re-read, but we need to have tests that use previously stored messages to make sure that the Java versions are interoping with itself over time.&lt;/p&gt;</description>
                <environment/>
            <key id="10038">FRJ-20</key>
            <summary>Must have test that reads previously serialized messages</summary>
                <type id="3" iconUrl="http://jira.fudgemsg.org/images/icons/task.gif">Task</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Thu, 12 Nov 2009 11:48:03 +0000</created>
                <updated>Thu, 19 Nov 2009 10:22:42 +0000</updated>
                    <resolved>Thu, 19 Nov 2009 10:22:42 +0000</resolved>
                            <version>0.1</version>
                <version>0.2</version>
                                <fixVersion>0.2</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10014" author="kirk" created="Thu, 12 Nov 2009 12:05:12 +0000">&lt;p&gt;This is done in the OpenGamma/Fudge-Java clone, and just waiting on the resolution on other matters before I can push everything upstream.&lt;/p&gt;</comment>
                    <comment id="10034" author="kirk" created="Thu, 19 Nov 2009 10:22:42 +0000">&lt;p&gt;Pushed upstream.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-19] Stream Fudge Messages as XML text</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-19</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;All Fudge messages can be represented in some way as XML. Using the standard encoding definitions from systems like XSD (for binary fields) we should be able to stream any FudgeFieldContainer as XML.&lt;/p&gt;</description>
                <environment/>
            <key id="10037">FRJ-19</key>
            <summary>Stream Fudge Messages as XML text</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Thu, 12 Nov 2009 11:39:11 +0000</created>
                <updated>Thu, 25 Feb 2010 13:25:47 +0000</updated>
                    <resolved>Thu, 25 Feb 2010 13:25:47 +0000</resolved>
                                            <fixVersion>0.3</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10062" author="t0rx" created="Wed, 23 Dec 2009 14:50:17 +0000">&lt;p&gt;This is working in C# now - see &lt;a href="http://github.com/FudgeMsg/Fudge-CSharp/blob/master/Fudge/Encodings/FudgeXmlStreamWriter.cs"&gt;http://github.com/FudgeMsg/Fudge-CSharp/blob/master/Fudge/Encodings/FudgeXmlStreamWriter.cs&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="10099" author="andrew" created="Fri, 29 Jan 2010 16:32:47 +0000">&lt;p&gt;There's a XML writer in OpenGamma/FudgeMsg - fudgeproto branch. There is no reader and the output is not identical to the C# version (e.g. handling of field names with spaces, missing field names, ordinals and binary data). I suspect its use would be more for test/debugging of something generating a stream rather than for interop between systems so is this an issue??&lt;/p&gt;</comment>
                    <comment id="10102" author="kirk" created="Fri, 29 Jan 2010 16:42:14 +0000">&lt;p&gt;We definitely need this to have full, standardized bi-directional support.&lt;/p&gt;

&lt;p&gt;I'd recommend that we need to have a wiki page (like for object serialization) where we specify the standard, and then make all the implementations match up.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                <outwardlinks description="requires">
                            <issuelink>
            <issuekey id="10158">FRJ-39</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="10159">FRJ-40</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-18] Stream Fudge Messages as JSON text</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-18</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;There's a relatively easy correspondence between Fudge messages and JSON streams. Using examples from the MongoDB library, we can stream out JSON for FudgeFieldContainers.&lt;/p&gt;</description>
                <environment/>
            <key id="10036">FRJ-18</key>
            <summary>Stream Fudge Messages as JSON text</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Thu, 12 Nov 2009 11:38:03 +0000</created>
                <updated>Mon, 22 Mar 2010 17:46:43 +0000</updated>
                    <resolved>Mon, 22 Mar 2010 17:46:43 +0000</resolved>
                                                                    <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10063" author="t0rx" created="Wed, 23 Dec 2009 14:52:14 +0000">&lt;p&gt;There's a C# implementation of reading JSON at &lt;a href="http://github.com/FudgeMsg/Fudge-CSharp/blob/master/Fudge/Encodings/FudgeJSONStreamReader.cs"&gt;http://github.com/FudgeMsg/Fudge-CSharp/blob/master/Fudge/Encodings/FudgeJSONStreamReader.cs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've not done writing JSON yet, as arrays are a bit of a PITA through a streaming interface.&lt;/p&gt;</comment>
                    <comment id="10163" author="andrew" created="Fri, 5 Mar 2010 14:39:54 +0000">&lt;p&gt;Basic code written but needs a WIKI page similar to the XML one.&lt;/p&gt;</comment>
                    <comment id="10164" author="kirk" created="Fri, 5 Mar 2010 14:43:53 +0000">&lt;p&gt;Did you roll it yourself, or use a JSON library? If the latter, we'll need to have it be a separate Ivy configuration to minimize unnecessary libraries.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-17] Support "secondary" types, e.g. Guid</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-17</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;I did some work in the .net version to support having secondary types that are transmitted as a different primitive type.  This was a while ago in commit &lt;a href="http://github.com/FudgeMsg/Fudge-CSharp/commit/c1ed75d3418b653898eaa72c644fd3586575256b"&gt;http://github.com/FudgeMsg/Fudge-CSharp/commit/c1ed75d3418b653898eaa72c644fd3586575256b&lt;/a&gt; so the surrounding code may have moved on since then.&lt;/p&gt;

&lt;p&gt;Have a look at FudgeMsgTest.SecondaryTypes() in the unit tests for an example.&lt;/p&gt;</description>
                <environment/>
            <key id="10034">FRJ-17</key>
            <summary>Support "secondary" types, e.g. Guid</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="t0rx">Yan Tordoff</reporter>
                        <labels>
                    </labels>
                <created>Mon, 9 Nov 2009 22:11:09 +0000</created>
                <updated>Thu, 11 Feb 2010 19:04:04 +0000</updated>
                    <resolved>Thu, 11 Feb 2010 19:04:04 +0000</resolved>
                                            <fixVersion>0.2</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10118" author="andrew" created="Thu, 4 Feb 2010 16:06:23 +0000">&lt;p&gt;I've built a mechanism very similar to the C# one. The approach seems to work rather well, so my earlier comments in the C# code can be removed the next time someone is near it.&lt;/p&gt;</comment>
                    <comment id="10128" author="andrew" created="Thu, 11 Feb 2010 19:04:04 +0000">&lt;p&gt;Available in FudgeMsg/Fudge-Java&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10035">FRN-10</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                <outwardlinks description="requires">
                            <issuelink>
            <issuekey id="10120">FRJ-34</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-16] Generate and package Javadocs as part of distribution process</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-16</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now we're not, but we definitely want to be.&lt;/p&gt;

&lt;p&gt;While we're generating -src.jar files, we also want to be able to generate Javadocs, particularly so that we can have them online.&lt;/p&gt;</description>
                <environment/>
            <key id="10033">FRJ-16</key>
            <summary>Generate and package Javadocs as part of distribution process</summary>
                <type id="3" iconUrl="http://jira.fudgemsg.org/images/icons/task.gif">Task</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Sun, 8 Nov 2009 15:21:28 +0000</created>
                <updated>Sun, 8 Nov 2009 15:58:08 +0000</updated>
                    <resolved>Sun, 8 Nov 2009 15:58:08 +0000</resolved>
                            <version>0.1</version>
                                <fixVersion>0.1</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-15] Update mongodb libraries to 1.0</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-15</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;This was released on 2009-11-06. Before we produce the first 0.1 dist file, we need to bring this up to date.&lt;/p&gt;</description>
                <environment/>
            <key id="10032">FRJ-15</key>
            <summary>Update mongodb libraries to 1.0</summary>
                <type id="3" iconUrl="http://jira.fudgemsg.org/images/icons/task.gif">Task</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Sun, 8 Nov 2009 14:35:29 +0000</created>
                <updated>Thu, 12 Nov 2009 17:22:47 +0000</updated>
                    <resolved>Sun, 8 Nov 2009 15:05:47 +0000</resolved>
                            <version>0.1</version>
                                <fixVersion>0.1</fixVersion>
                                <component>MongoDB</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-14] Generate better distribution packages</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-14</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now we are generating a minimal distribution package. However, it needs to have a README and a LICENSE if nothing else, and we may want some more ergonomics.&lt;/p&gt;</description>
                <environment/>
            <key id="10031">FRJ-14</key>
            <summary>Generate better distribution packages</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Sun, 8 Nov 2009 14:25:21 +0000</created>
                <updated>Sun, 8 Nov 2009 15:58:17 +0000</updated>
                    <resolved>Sun, 8 Nov 2009 15:58:17 +0000</resolved>
                            <version>0.1</version>
                                <fixVersion>0.1</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-13] Rebuild Encoder/Decoder system</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-13</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;When we started doing the coding, we wrote &lt;tt&gt;FudgeStreamEncoder&lt;/tt&gt; and &lt;tt&gt;FudgeStreamDecoder&lt;/tt&gt; in a purely functional style, with no state whatsoever. While this was a reasonable approach at the time, this was before the creation of &lt;tt&gt;FudgeContext&lt;/tt&gt; to hold all the various encoding and decoding possibilities that could be held.&lt;/p&gt;

&lt;p&gt;A far better strategy now, given the existence of &lt;tt&gt;FudgeContext&lt;/tt&gt;, is to make the encoder and decoder interfaces, with implementations constructed by the &lt;tt&gt;FudgeContext&lt;/tt&gt; matching its parameters. These can then be simplified quite a bit (particularly the number of parameters passed around).&lt;/p&gt;

&lt;p&gt;While we're at it, the &lt;b&gt;Stream&lt;/b&gt; part of the names needs to be emphasized for streaming ones, so that they really can stream out fields as they're provided, and pull in fields as they're available.&lt;/p&gt;</description>
                <environment/>
            <key id="10030">FRJ-13</key>
            <summary>Rebuild Encoder/Decoder system</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Sun, 8 Nov 2009 14:07:56 +0000</created>
                <updated>Thu, 11 Feb 2010 19:05:07 +0000</updated>
                    <resolved>Thu, 11 Feb 2010 19:05:07 +0000</resolved>
                            <version>0.1</version>
                                <fixVersion>0.2</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10011" author="kirk" created="Sun, 8 Nov 2009 14:11:52 +0000">&lt;p&gt;We might want to take care of the specs for &lt;a href="http://jira.fudgemsg.org/browse/FRN-9" title="Objects should be streamed out as serialised, not put in parent message"&gt;FRN-9&lt;/a&gt; and &lt;a href="http://jira.fudgemsg.org/browse/FRJ-13" title="Rebuild Encoder/Decoder system"&gt;&lt;del&gt;FRJ-13&lt;/del&gt;&lt;/a&gt; at the same time.&lt;/p&gt;</comment>
                    <comment id="10013" author="kirk" created="Wed, 11 Nov 2009 11:20:10 +0000">&lt;p&gt;Code for this is currently in the OpenGamma/Fudge-Java.git repository on github. I'm going to wait to see how people react before resolving this and pushing it up to FudgeMsg/Fudge-Java.git.&lt;/p&gt;</comment>
                    <comment id="10033" author="kirk" created="Thu, 19 Nov 2009 10:22:19 +0000">&lt;p&gt;I've pushed up the current state of this to the master repository, but still have to work on the message sizing issue.&lt;/p&gt;</comment>
                    <comment id="10073" author="kirk" created="Sat, 2 Jan 2010 15:36:46 +0000">&lt;p&gt;Although much of this has been pushed up, I'm assigning to Andrew to finish off finally.&lt;/p&gt;</comment>
                    <comment id="10093" author="andrew" created="Tue, 26 Jan 2010 16:26:52 +0000">&lt;p&gt;Fixed in OpenGamma/Fudge-Java fudgeproto branch.&lt;/p&gt;

&lt;p&gt;The original interfaces have been replaced by three layers which can hold state. The lowest reads/writes Fudge stream elements, the next reads messages/envelopes as a whole, the outer can do object serialisation. I'm not sure how amenable this approach is to addressing &lt;a href="http://jira.fudgemsg.org/browse/FRN-9" title="Objects should be streamed out as serialised, not put in parent message"&gt;FRN-9&lt;/a&gt; and &lt;a href="http://jira.fudgemsg.org/browse/FRJ-23" title="Move size calculation logic to a dedicated class/routine"&gt;&lt;del&gt;FRJ-23&lt;/del&gt;&lt;/a&gt; as it requires the full FudgeMsg be constructed for passing between layers 1 and 2.&lt;/p&gt;</comment>
                    <comment id="10120" author="andrew" created="Thu, 4 Feb 2010 16:14:04 +0000">&lt;p&gt;In the OpenGamma master branch for evaluation by OpenGamma developers&lt;/p&gt;</comment>
                    <comment id="10132" author="andrew" created="Thu, 11 Feb 2010 19:05:07 +0000">&lt;p&gt;Available in FudgeMsg/Fudge-Java&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                <outwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10021">FRN-9</issuekey>
        </issuelink>
                    </outwardlinks>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10044">FRN-11</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                <outwardlinks description="requires">
                            <issuelink>
            <issuekey id="10120">FRJ-34</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-12] Automatically map JavaBeans to FudgeMsg</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-12</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;By navigating the fields or the Bean properties we should be able to automatically map most if not all JavaBeans to FudgeMsg instances.&lt;/p&gt;

&lt;p&gt;The only issue we'll come across is in graph-like structures, but we can throw an exception when that occurs.&lt;/p&gt;</description>
                <environment/>
            <key id="10020">FRJ-12</key>
            <summary>Automatically map JavaBeans to FudgeMsg</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Fri, 6 Nov 2009 10:40:23 +0000</created>
                <updated>Thu, 11 Feb 2010 19:05:47 +0000</updated>
                    <resolved>Thu, 11 Feb 2010 19:05:47 +0000</resolved>
                                            <fixVersion>0.2</fixVersion>
                                <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10100" author="andrew" created="Fri, 29 Jan 2010 16:36:14 +0000">&lt;p&gt;The custom builder framework should be able to handle beans (the ReflectionObjectBuilder and ReflectionMessageBuilder) by looking for get/set methods and lowercasing the first character of the rest of the method name to get a field name.&lt;/p&gt;

&lt;p&gt;Needs a more thorough unit test with some actual beans.&lt;/p&gt;

&lt;p&gt;A graph structure should be rejected by the FudgeSerialisationContext as soon as a loop is discovered.&lt;/p&gt;</comment>
                    <comment id="10105" author="andrew" created="Mon, 1 Feb 2010 15:55:50 +0000">&lt;p&gt;Done (OpenGamma/FudgeMsg fudgeproto branch). Beans are handled by the JavaBeanBuilder as part of the generic serialisation using the BeanUtils package.&lt;/p&gt;

&lt;p&gt;A FudgeRuntimeException is raised if a loop is discovered in a graph.&lt;/p&gt;

&lt;p&gt;An object graph without loops but multiple references to the same node is not handled properly, but doesn't error. Each reference to an object results in a copy of that object being written rather than a back reference be sent.&lt;/p&gt;</comment>
                    <comment id="10121" author="andrew" created="Thu, 4 Feb 2010 16:14:53 +0000">&lt;p&gt;In the OpenGamma master branch&lt;/p&gt;</comment>
                    <comment id="10134" author="andrew" created="Thu, 11 Feb 2010 19:05:47 +0000">&lt;p&gt;Available in FudgeMsg/Fudge-Java&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10012">
                <name>Association</name>
                                                <inwardlinks description="is associated with">
                            <issuelink>
            <issuekey id="10040">FRJ-22</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10011">
                <name>Requirement</name>
                                <outwardlinks description="requires">
                            <issuelink>
            <issuekey id="10120">FRJ-34</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-11] Need a .getMessage() method similar to all the other shortcut field methods</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-11</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description/>
                <environment/>
            <key id="10014">FRJ-11</key>
            <summary>Need a .getMessage() method similar to all the other shortcut field methods</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Wed, 28 Oct 2009 16:05:18 +0000</created>
                <updated>Thu, 12 Nov 2009 17:22:18 +0000</updated>
                    <resolved>Wed, 28 Oct 2009 17:52:32 +0000</resolved>
                            <version>0.1</version>
                                <fixVersion>0.1</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-10] Put all required Ivy dependencies on dist.fudgemsg.org</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-10</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now we're using the Ivy roundup versions, but we should have them in dist.fudgemsg.org to simplify things.&lt;/p&gt;</description>
                <environment/>
            <key id="10013">FRJ-10</key>
            <summary>Put all required Ivy dependencies on dist.fudgemsg.org</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="kirk">Kirk Wylie</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Tue, 27 Oct 2009 09:44:43 +0000</created>
                <updated>Tue, 27 Oct 2009 10:57:25 +0000</updated>
                    <resolved>Tue, 27 Oct 2009 10:57:25 +0000</resolved>
                            <version>0.1</version>
                                <fixVersion>0.1</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10003" author="kirk" created="Tue, 27 Oct 2009 10:57:25 +0000">&lt;p&gt;Have put everything necessary for Fudge to be built on dist.fudgemsg.org, and changed all Ivy settings to refer to that location for resolution.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-9] Use true UTF-8 encoding for Strings</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-9</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now Fudge is using Modified UTF-8. We should convert to true UTF-8.&lt;/p&gt;

&lt;p&gt;This is not going into 0.1 because it will only impact the way certain odd characters (like Unicode 0x0) get encoded.&lt;/p&gt;</description>
                <environment/>
            <key id="10009">FRJ-9</key>
            <summary>Use true UTF-8 encoding for Strings</summary>
                <type id="4" iconUrl="http://jira.fudgemsg.org/images/icons/improvement.gif">Improvement</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Sun, 25 Oct 2009 20:41:11 +0000</created>
                <updated>Mon, 14 Mar 2011 18:24:58 +0000</updated>
                    <resolved>Mon, 14 Mar 2011 18:24:58 +0000</resolved>
                            <version>0.1</version>
                                <fixVersion>0.3</fixVersion>
                                <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10016" author="kirk" created="Thu, 12 Nov 2009 12:24:47 +0000">&lt;p&gt;We need to actually think about this given how many bogus UTF-8 implementations there are, and how prevalent Modified UTF-8 is when working with JNI.&lt;/p&gt;</comment>
                    <comment id="10101" author="andrew" created="Fri, 29 Jan 2010 16:41:50 +0000">&lt;p&gt;There is a UTF8 class in the org.fudgemsg package, but it isn't used at the moment. It hasn't been tested properly either.&lt;/p&gt;</comment>
                    <comment id="10321" author="stephen" created="Mon, 14 Mar 2011 18:24:58 +0000">&lt;p&gt;Was fixed in 0.3&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-8] RESTful TaxonomyResolver</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-8</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;We need a TaxonomyResolver that can resolve taxonomies through any type of RESTful URL encoding scheme:&lt;/p&gt;
&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;Classpath references&lt;/li&gt;
	&lt;li&gt;HTTP calls&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This might seem like you'd want a number of different taxonomy resolvers, but by making use of interfacing for things like URL composition, we should be able to provide a single subsystem that works well for most use cases.&lt;/p&gt;</description>
                <environment/>
            <key id="10008">FRJ-8</key>
            <summary>RESTful TaxonomyResolver</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Sun, 25 Oct 2009 19:51:49 +0000</created>
                <updated>Tue, 23 Feb 2010 20:56:07 +0000</updated>
                    <resolved>Tue, 23 Feb 2010 20:56:07 +0000</resolved>
                                            <fixVersion>0.2</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10153" author="andrew" created="Tue, 23 Feb 2010 20:56:07 +0000">&lt;p&gt;org.fudgemsg.taxon.RESTfulTaxonomyResolver&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-7] FudgeTaxonomy data stored in a Java properties file</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-7</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;The implementation should load taxonomy details from any arbitrary source of Java properties data (a URL or a resource reference).&lt;/p&gt;</description>
                <environment/>
            <key id="10007">FRJ-7</key>
            <summary>FudgeTaxonomy data stored in a Java properties file</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Sun, 25 Oct 2009 19:49:54 +0000</created>
                <updated>Tue, 23 Feb 2010 19:54:27 +0000</updated>
                    <resolved>Tue, 23 Feb 2010 19:54:27 +0000</resolved>
                                            <fixVersion>0.2</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="10152" author="andrew" created="Tue, 23 Feb 2010 19:54:27 +0000">&lt;p&gt;org.fudgemsg.taxon.PropertyFileTaxonomy&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-6] Storage of a FudgeMsg in the body of a JMS Message</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-6</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Because of the nature of ByteMessage, there needs to be a standard way to load and store Fudge messages in the body of a JMS message. This is not instantly obvious because you can't just extract the body of any type of Message as a byte array, so we need to have routines that make it easy to load and store Fudge messages in a JMS Message.&lt;/p&gt;</description>
                <environment/>
            <key id="10006">FRJ-6</key>
            <summary>Storage of a FudgeMsg in the body of a JMS Message</summary>
                <type id="5" iconUrl="http://jira.fudgemsg.org/images/icons/issue_subtask.gif">Sub-task</type>
                    <parent id="10004">FRJ-4</parent>
                        <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Sun, 25 Oct 2009 19:48:24 +0000</created>
                <updated>Thu, 12 Nov 2009 17:21:46 +0000</updated>
                                                                    <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-5] Mapping of JMS Message properties to FudgeFieldContainer</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-5</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;There should be support for loading/storing Fudge fields as Properties of a Message, and vice versa.&lt;/p&gt;</description>
                <environment/>
            <key id="10005">FRJ-5</key>
            <summary>Mapping of JMS Message properties to FudgeFieldContainer</summary>
                <type id="5" iconUrl="http://jira.fudgemsg.org/images/icons/issue_subtask.gif">Sub-task</type>
                    <parent id="10004">FRJ-4</parent>
                        <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Sun, 25 Oct 2009 19:47:01 +0000</created>
                <updated>Thu, 12 Nov 2009 17:21:54 +0000</updated>
                                                                    <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-4] JMS Message mapping to FudgeMsg</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-4</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;We should have a JMS integration package that allows for easy integration into a JMS environment.&lt;/p&gt;

&lt;p&gt;This is a roll-up issue, and sub-tasks will be in other issues.&lt;/p&gt;</description>
                <environment/>
            <key id="10004">FRJ-4</key>
            <summary>JMS Message mapping to FudgeMsg</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Sun, 25 Oct 2009 19:46:25 +0000</created>
                <updated>Thu, 12 Nov 2009 17:22:03 +0000</updated>
                                                                    <component>Mappings</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
            <subtask id="10005">FRJ-5</subtask>
            <subtask id="10006">FRJ-6</subtask>
        </subtasks>
        </item>

<item>
            <title>[FRJ-3] Improve ivy processing</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-3</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now we have an Ivy file that is suitable for basic building duties.&lt;/p&gt;

&lt;p&gt;However, we want to have a full Ivy configuration that is suitable for inclusion with other projects, particularly using capabilities so that people can avoid features that they don't want/need (like MongoDB integration).&lt;/p&gt;</description>
                <environment/>
            <key id="10003">FRJ-3</key>
            <summary>Improve ivy processing</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Sun, 25 Oct 2009 19:45:07 +0000</created>
                <updated>Sun, 25 Oct 2009 19:45:07 +0000</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-2] FudgeFieldContainer backed directly by a ByteBuffer</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-2</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;It should be possible to write an implementation of FudgeFieldContainer which is backed directly by a byte array (using NIO and ByteBuffer) rather than extracting every field into a full FudgeMsg implementation.&lt;/p&gt;

&lt;p&gt;This would be optimal for situations where only a few fields need to be read before the message is processed in another form.&lt;/p&gt;</description>
                <environment/>
            <key id="10002">FRJ-2</key>
            <summary>FudgeFieldContainer backed directly by a ByteBuffer</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="5" iconUrl="http://jira.fudgemsg.org/images/icons/status_resolved.gif">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="andrew">Andrew Griffin</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Sun, 25 Oct 2009 19:40:06 +0000</created>
                <updated>Tue, 22 Mar 2011 15:04:19 +0000</updated>
                    <resolved>Tue, 22 Mar 2011 15:04:19 +0000</resolved>
                                                            <component>Core</component>
                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>

<item>
            <title>[FRJ-1] Native support for MongoDB network protocol</title>
                <link>http://jira.fudgemsg.org/browse/FRJ-1</link>
                <project id="10000" key="FRJ">Java Reference Implementation</project>
                        <description>&lt;p&gt;Right now there is code that can convert between a FudgeMsg and a MongoDB BasicDBObject, so that you can persist and load Fudge messages in MongoDB.&lt;/p&gt;

&lt;p&gt;However, given how similar they are, it should be possible to write support for the MongoDB protocol itself with Fudge messages, so that you don't have to do a message structure copy/convert in order to integrate with MongoDB.&lt;/p&gt;</description>
                <environment/>
            <key id="10001">FRJ-1</key>
            <summary>Native support for MongoDB network protocol</summary>
                <type id="2" iconUrl="http://jira.fudgemsg.org/images/icons/newfeature.gif">New Feature</type>
                                <priority id="3" iconUrl="http://jira.fudgemsg.org/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://jira.fudgemsg.org/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kirk">Kirk Wylie</reporter>
                        <labels>
                    </labels>
                <created>Sun, 25 Oct 2009 19:38:48 +0000</created>
                <updated>Thu, 12 Nov 2009 17:20:48 +0000</updated>
                                                                    <component>MongoDB</component>
                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="10012" author="t0rx" created="Sun, 8 Nov 2009 23:36:32 +0000">&lt;p&gt;We need to be clever about how we handle this kind of thing - so far we've got at least four possible implementations of FudgeMsg:&lt;/p&gt;
&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;Simple, as current&lt;/li&gt;
	&lt;li&gt;Lazy unpacking of fields&lt;/li&gt;
	&lt;li&gt;MongoDB-compatible&lt;/li&gt;
	&lt;li&gt;One that tracks which fields you've read (needed to support evolvability in serialisation)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Doing this through the context makes obvious sense when reading from a stream, but I've an uneasy feeling there's more to it than that...&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
        </item>
</channel>
</rss>