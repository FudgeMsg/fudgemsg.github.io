<?xml version="1.0" encoding="UTF-8"?>
<!-- Sample stylesheet which renders JIRA's RSS (XML) output in a HTML format similar to the {jiraissues} macro in Confluence. See navigator-rss.jsp for how to apply this automatically. -->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">

	<xsl:param name="url" select="'undefined.jira.url'"/>

	<xsl:param name="title_type" select="'T'"/>
	<xsl:param name="title_key" select="'Key'"/>
	<xsl:param name="title_summary" select="'Summary'"/>
	<xsl:param name="title_status" select="'Status'"/>
	<xsl:param name="title_resolution" select="'Resolution'"/>
  <xsl:param name="title_created" select="'Created'"/>

	<xsl:template match="/rss/channel">
		<html>
			<head>
        <link rel="stylesheet" href="http://confluence.atlassian.com/styles/main-action.css" type="text/css"/>
				<title>RSS - <xsl:value-of select="title"/></title>
			</head>
			<body>
				<table class="grid" cellspacing="0" width="100%">
					<caption style="text-align: left; font-weight: bold">
							<xsl:value-of select="title"/>
							<span class="smalltext"> (<xsl:value-of select="count(item)"/> issues)</span>
						</caption>
					<tbody>
						<tr>
              <th style="text-align: left;"> <xsl:value-of select="$title_key"/> </th>
							<th style="text-align: left;"> <xsl:value-of select="$title_type"/> </th>
							<th style="text-align: left;"> <xsl:value-of select="$title_summary"/> </th> 
							<th style="text-align: left;"> <xsl:value-of select="$title_status"/> </th>
							<th style="text-align: left;"> <xsl:value-of select="$title_resolution"/> </th>
              <th style="text-align: left;"> <xsl:value-of select="$title_created"/> </th>
						</tr>
						<xsl:for-each select="item">
							<tr>
								<xsl:attribute name="class">
									<xsl:choose>
										<xsl:when test="position() mod 2 = 0">rowNormal</xsl:when>
										<xsl:otherwise>rowAlternate</xsl:otherwise>
									</xsl:choose>
								</xsl:attribute>
                <xsl:apply-templates select="key"/>
								<xsl:apply-templates select="type"/>
								<xsl:apply-templates select="summary"/>
								<xsl:apply-templates select="status"/>
								<xsl:apply-templates select="resolution"/>
                <xsl:apply-templates select="created"/>
							</tr>
              <tr>
                <td colspan="6">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="position() mod 2 = 0">rowNormal</xsl:when>
                      <xsl:otherwise>rowAlternate</xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:apply-templates select="description"/>
                </td>
              </tr>
						</xsl:for-each>

					</tbody>
				</table>
			</body>
		</html>
	</xsl:template>


	<xsl:template match="type">
    <td nowrap="true">
      <xsl:value-of select="."/>
    </td>
	</xsl:template>

	<xsl:template match="key">
		<td nowrap="true">
			<xsl:value-of select="."/>
		</td>
	</xsl:template>

	<xsl:template match="summary">
    <td nowrap="true">
      <xsl:value-of select="."/>
    </td>
	</xsl:template>

	<xsl:template match="status">
    <td nowrap="true">
      <xsl:value-of select="."/>
    </td>
	</xsl:template>

	<xsl:template match="resolution">
    <td nowrap="true">
      <xsl:value-of select="."/>
    </td>
	</xsl:template>

  <xsl:template match="created">
    <td nowrap="true">
      <xsl:value-of select="."/>
    </td>
  </xsl:template>

  <xsl:template match="description">
    <xsl:value-of select="."/>
  </xsl:template>

  <xsl:template name="string-replace-all">
    <xsl:param name="text" />
    <xsl:param name="replace" />
    <xsl:param name="by" />
    <xsl:choose>
      <xsl:when test="contains($text, $replace)">
        <xsl:value-of select="substring-before($text,$replace)" />
        <xsl:value-of select="$by" />
        <xsl:call-template name="string-replace-all">
          <xsl:with-param name="text" select="substring-after($text,$replace)" />
          <xsl:with-param name="replace" select="$replace" />
          <xsl:with-param name="by" select="$by" />
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$text" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
</xsl:stylesheet>
